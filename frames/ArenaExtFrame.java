/* This Frame represents the exterior of the arena. The player can place bets on
 * his or her expected arena performance. Much of the code that faciilitates 
 * multiplayer matches has been commented out. This will be revisited as time
 * permits.
 */
package frames;

import arena3.Arena;
import collections.Items;
import collections.Roles;
import java.io.IOException;
import java.util.Map;
import java.util.Vector;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.JFormattedTextField;
import javax.swing.JSpinner;
import javax.swing.ListModel;
import javax.swing.SwingWorker;
import utilities.FrameManipulator;
import utilities.AudioPlayer;
import abilities.Ability;

/**
 * @author Scott Underwood
 * @author Shawn Ferdig
 */
public class ArenaExtFrame extends javax.swing.JFrame {
    //audio player for the ambient noise
    private AudioPlayer audioPlayer;
    //audio player for sound effects
    private AudioPlayer audioPlayerOne;
    
    private ArenaFrame arenaFrame;
    private FrameManipulator frameManipulator = new FrameManipulator();

    /**
     * Creates new form ArenaExt
     */
    public ArenaExtFrame() {
        
        initComponents();
        wagerFrame.setVisible(false);
        try{
            audioPlayer = new AudioPlayer();
            audioPlayerOne = new AudioPlayer();
        }
        catch(IOException | LineUnavailableException | 
                UnsupportedAudioFileException e){}
        audioPlayer.setTrack(7);
        audioPlayer.play();
        this.audioPlayer.volume(-15f);
        frameManipulator.centeredFrame(this);
        if(Arena.CUR_PLAYER.isBetActive()){
            this.wagerButton.setEnabled(false);
        }
        updateForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        wagerButton = new javax.swing.JButton();
        enterArena = new javax.swing.JButton();
        onlineArena = new javax.swing.JButton();
        Exit = new javax.swing.JButton();
        wagerFrame = new javax.swing.JPanel();
        WageFrame = new javax.swing.JLayeredPane();
        winningLabel = new javax.swing.JLabel();
        wagerRoundSpinnerLabel = new javax.swing.JLabel();
        winningsLabelLabel = new javax.swing.JLabel();
        wagerSpinnerLabel = new javax.swing.JLabel();
        wagerRoundSpinner = new javax.swing.JSpinner();
        wagerSpinner = new javax.swing.JSpinner();
        exitWagerButton = new javax.swing.JButton();
        placeBetButton = new javax.swing.JButton();
        wageBackGround = new javax.swing.JLabel();
        characterSheet = new javax.swing.JPanel();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        xpCreditsLabel = new javax.swing.JLabel();
        expLabel = new javax.swing.JLabel();
        goldAmountLabel = new javax.swing.JLabel();
        goldLabel = new javax.swing.JLabel();
        heroDexLabel = new javax.swing.JLabel();
        heroIntLabel = new javax.swing.JLabel();
        heroStrLabel = new javax.swing.JLabel();
        levelLabel = new javax.swing.JLabel();
        roleLabel = new javax.swing.JLabel();
        abilityPanel = new javax.swing.JPanel();
        abilityScrollPane = new javax.swing.JScrollPane();
        abilityList = new javax.swing.JList<>();
        eqipmentPanel = new javax.swing.JPanel();
        swordImageLabel = new javax.swing.JLabel();
        staffImageLabel = new javax.swing.JLabel();
        bowImageLabel2 = new javax.swing.JLabel();
        itemPanel3 = new javax.swing.JPanel();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        potionQuantityLabel = new javax.swing.JLabel();
        healthPotionButton = new javax.swing.JButton();
        healthPotionLabel = new javax.swing.JLabel();
        abilityQuantityLabel = new javax.swing.JLabel();
        abilityPotionButton = new javax.swing.JButton();
        comboQuantityLabel = new javax.swing.JLabel();
        comboPotionButton = new javax.swing.JButton();
        wagerAmountLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        abilityPotionLabel = new javax.swing.JLabel();
        comboPotionLabel = new javax.swing.JLabel();
        wagerLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        heroXpBarLabel = new javax.swing.JLabel();
        heroMpBarLabel = new javax.swing.JLabel();
        heroHpBarLabel = new javax.swing.JLabel();
        heroXpBar = new javax.swing.JProgressBar();
        heroMpBar = new javax.swing.JProgressBar();
        heroHpBar = new javax.swing.JProgressBar();
        BackGround = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLayeredPane1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        wagerButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        wagerButton.setForeground(new java.awt.Color(0, 0, 0));
        wagerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SandStoneTexture.jpg"))); // NOI18N
        wagerButton.setText("PLACE WAGER");
        wagerButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 204, 102), 3, true));
        wagerButton.setFocusPainted(false);
        wagerButton.setFocusable(false);
        wagerButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        wagerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wagerButtonActionPerformed(evt);
            }
        });
        jLayeredPane1.add(wagerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 500, 200, 50));

        enterArena.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        enterArena.setForeground(new java.awt.Color(0, 0, 0));
        enterArena.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SandStoneTexture.jpg"))); // NOI18N
        enterArena.setText("ENTER ARENA");
        enterArena.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 204, 102), 3, true));
        enterArena.setFocusPainted(false);
        enterArena.setFocusable(false);
        enterArena.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        enterArena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterArenaActionPerformed(evt);
            }
        });
        jLayeredPane1.add(enterArena, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 560, 200, 50));

        onlineArena.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        onlineArena.setForeground(new java.awt.Color(0, 0, 0));
        onlineArena.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SandStoneTexture.jpg"))); // NOI18N
        onlineArena.setText("ONLINE ARENA");
        onlineArena.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 204, 102), 3, true));
        onlineArena.setFocusPainted(false);
        onlineArena.setFocusable(false);
        onlineArena.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        onlineArena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onlineArenaActionPerformed(evt);
            }
        });
        jLayeredPane1.add(onlineArena, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 560, 200, 50));

        Exit.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        Exit.setForeground(new java.awt.Color(0, 0, 0));
        Exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SandStoneTexture.jpg"))); // NOI18N
        Exit.setText("TO TOWN");
        Exit.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 204, 102), 3, true));
        Exit.setFocusPainted(false);
        Exit.setFocusable(false);
        Exit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jLayeredPane1.add(Exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 620, 200, 50));

        wagerFrame.setOpaque(false);

        WageFrame.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        winningLabel.setBackground(new java.awt.Color(51, 51, 51));
        winningLabel.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        winningLabel.setForeground(new java.awt.Color(255, 255, 255));
        winningLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        winningLabel.setText("0");
        winningLabel.setOpaque(true);
        WageFrame.add(winningLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 230, 190, 40));

        wagerRoundSpinnerLabel.setBackground(new java.awt.Color(255, 255, 204));
        wagerRoundSpinnerLabel.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        wagerRoundSpinnerLabel.setForeground(new java.awt.Color(0, 0, 0));
        wagerRoundSpinnerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        wagerRoundSpinnerLabel.setText("HOW MANY OPPONENTS DEFEATED?");
        wagerRoundSpinnerLabel.setOpaque(true);
        WageFrame.add(wagerRoundSpinnerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 150, 310, 40));

        winningsLabelLabel.setBackground(new java.awt.Color(255, 255, 204));
        winningsLabelLabel.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        winningsLabelLabel.setForeground(new java.awt.Color(0, 0, 0));
        winningsLabelLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        winningsLabelLabel.setText("POTENTIAL WINNINGS");
        winningsLabelLabel.setOpaque(true);
        WageFrame.add(winningsLabelLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 230, 310, 40));

        wagerSpinnerLabel.setBackground(new java.awt.Color(255, 255, 204));
        wagerSpinnerLabel.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        wagerSpinnerLabel.setForeground(new java.awt.Color(0, 0, 0));
        wagerSpinnerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        wagerSpinnerLabel.setText("HOW MUCH DO YOU WISH TO WAGER?");
        wagerSpinnerLabel.setOpaque(true);
        WageFrame.add(wagerSpinnerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 80, 310, 40));

        wagerRoundSpinner.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        wagerRoundSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        wagerRoundSpinner.setToolTipText("");
        wagerRoundSpinner.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        wagerRoundSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(wagerRoundSpinner, ""));
        wagerRoundSpinner.setFocusable(false);
        wagerRoundSpinner.setOpaque(true);
        wagerRoundSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                wagerRoundSpinnerStateChanged(evt);
            }
        });
        WageFrame.add(wagerRoundSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 150, 190, 40));

        wagerSpinner.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        wagerSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99999, 2));
        wagerSpinner.setToolTipText("");
        wagerSpinner.setAutoscrolls(true);
        wagerSpinner.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        wagerSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(wagerSpinner, ""));
        wagerSpinner.setFocusable(false);
        wagerSpinner.setOpaque(true);
        wagerSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                wagerSpinnerStateChanged(evt);
            }
        });
        wagerSpinner.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wagerSpinnerMouseClicked(evt);
            }
        });
        WageFrame.add(wagerSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 80, 190, 40));

        exitWagerButton.setText("GO BACK");
        exitWagerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitWagerButtonActionPerformed(evt);
            }
        });
        WageFrame.add(exitWagerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 310, 190, 50));

        placeBetButton.setText("Place Bet");
        placeBetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placeBetButtonActionPerformed(evt);
            }
        });
        WageFrame.add(placeBetButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 310, 200, 50));

        wageBackGround.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/goldcoinsIsrael_1024x1024.jpg"))); // NOI18N
        wageBackGround.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 204, 102), 5, true));
        WageFrame.add(wageBackGround, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 620, 390));

        javax.swing.GroupLayout wagerFrameLayout = new javax.swing.GroupLayout(wagerFrame);
        wagerFrame.setLayout(wagerFrameLayout);
        wagerFrameLayout.setHorizontalGroup(
            wagerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wagerFrameLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(WageFrame)
                .addContainerGap())
        );
        wagerFrameLayout.setVerticalGroup(
            wagerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wagerFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(WageFrame)
                .addGap(37, 37, 37))
        );

        jLayeredPane1.add(wagerFrame, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, 680, 430));

        characterSheet.setBackground(new java.awt.Color(0, 0, 0));
        characterSheet.setBorder(javax.swing.BorderFactory.createTitledBorder(null, arena3.Arena.CUR_PLAYER.getName(), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Century Gothic", 1, 24), new java.awt.Color(255, 255, 204))); // NOI18N
        characterSheet.setForeground(new java.awt.Color(255, 255, 204));

        jLayeredPane2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        xpCreditsLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        xpCreditsLabel.setForeground(new java.awt.Color(255, 255, 255));
        xpCreditsLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        xpCreditsLabel.setText(Integer.toString(arena3.Arena.CUR_PLAYER.getXpCredits()));
        jLayeredPane2.add(xpCreditsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 100, 40));

        expLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        expLabel.setForeground(new java.awt.Color(255, 255, 255));
        expLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        expLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/smallHourGlass-removebg-preview.png"))); // NOI18N
        expLabel.setToolTipText("XP Tokens");
        jLayeredPane2.add(expLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, 50, 40));

        goldAmountLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        goldAmountLabel.setForeground(new java.awt.Color(255, 255, 255));
        goldAmountLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        goldAmountLabel.setText(Integer.toString(arena3.Arena.CUR_PLAYER.getGold()));
        jLayeredPane2.add(goldAmountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, 100, 40));

        goldLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        goldLabel.setForeground(new java.awt.Color(255, 255, 255));
        goldLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        goldLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stacked-coin-14-removebg.png"))); // NOI18N
        goldLabel.setToolTipText("Gold");
        jLayeredPane2.add(goldLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 80, 80, 40));

        heroDexLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        heroDexLabel.setForeground(new java.awt.Color(51, 153, 0));
        heroDexLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        heroDexLabel.setText("DEX: "+Integer.toString(arena3.Arena.CUR_PLAYER.getDex()));
        jLayeredPane2.add(heroDexLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 40, 90, 40));

        heroIntLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        heroIntLabel.setForeground(new java.awt.Color(0, 51, 204));
        heroIntLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        heroIntLabel.setText("INT: "+Integer.toString(arena3.Arena.CUR_PLAYER.getMag()));
        jLayeredPane2.add(heroIntLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 40, 90, 40));

        heroStrLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        heroStrLabel.setForeground(new java.awt.Color(255, 0, 51));
        heroStrLabel.setText("STR: "+Integer.toString(arena3.Arena.CUR_PLAYER.getStr()));
        heroStrLabel.setName(""); // NOI18N
        jLayeredPane2.add(heroStrLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 90, 40));

        levelLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        levelLabel.setForeground(new java.awt.Color(255, 255, 255));
        levelLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        levelLabel.setText("LEVEL: "+Integer.toString(arena3.Arena.CUR_PLAYER.getLevel()));
        jLayeredPane2.add(levelLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 160, 40));

        roleLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        roleLabel.setForeground(new java.awt.Color(255, 255, 255));
        roleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        roleLabel.setText(arena3.Arena.CUR_PLAYER.getRole());
        jLayeredPane2.add(roleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 130, 40));

        abilityPanel.setBackground(new java.awt.Color(0, 0, 0));
        abilityPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ABILITIES", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 1, 14), new java.awt.Color(255, 255, 204))); // NOI18N
        abilityPanel.setForeground(new java.awt.Color(255, 255, 255));

        abilityList.setBackground(new java.awt.Color(0, 0, 0));
        abilityList.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        abilityList.setForeground(new java.awt.Color(255, 255, 255));
        abilityList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Cure", "Barrier", "Magic Missle", "Slow", "Pinning Shot", "Kill Bill", "FIre Ball", "Cover" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        abilityList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        abilityList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                abilityListMouseClicked(evt);
            }
        });
        abilityScrollPane.setViewportView(abilityList);

        javax.swing.GroupLayout abilityPanelLayout = new javax.swing.GroupLayout(abilityPanel);
        abilityPanel.setLayout(abilityPanelLayout);
        abilityPanelLayout.setHorizontalGroup(
            abilityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(abilityScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
        );
        abilityPanelLayout.setVerticalGroup(
            abilityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(abilityScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
        );

        jLayeredPane2.add(abilityPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 130, 310, 160));

        eqipmentPanel.setBackground(new java.awt.Color(0, 0, 0));
        eqipmentPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "EQUIPMENT", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 1, 14), new java.awt.Color(255, 255, 204))); // NOI18N

        swordImageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        swordImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/notSoTinySword.png"))); // NOI18N
        swordImageLabel.setToolTipText(Arena.CUR_PLAYER.getEquip().get("PHYSICAL").getName().toUpperCase()+"     Str:"+Arena.CUR_PLAYER.getEquip().get("PHYSICAL").getStr()+" Mag:"+arena3.Arena.CUR_PLAYER.getEquip().get("PHYSICAL").getMag()+" Dex:"+arena3.Arena.CUR_PLAYER.getEquip().get("PHYSICAL").getDex()
        );
        swordImageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                swordImageLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                swordImageLabelMouseExited(evt);
            }
        });

        staffImageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        staffImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bowSecondGo-removebg.png"))); // NOI18N
        staffImageLabel.setToolTipText(Arena.CUR_PLAYER.getEquip().get("RANGED").getName().toUpperCase()+"     Str:"+arena3.Arena.CUR_PLAYER.getEquip().get("RANGED").getStr()+" Mag:"+arena3.Arena.CUR_PLAYER.getEquip().get("RANGED").getMag()+" Dex:"+arena3.Arena.CUR_PLAYER.getEquip().get("RANGED").getDex());
        staffImageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                staffImageLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                staffImageLabelMouseExited(evt);
            }
        });

        bowImageLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bowImageLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/GemsfirstSecondgo.png"))); // NOI18N
        bowImageLabel2.setToolTipText(Arena.CUR_PLAYER.getEquip().get("MAGICAL").getName().toUpperCase()+"     Str:"+arena3.Arena.CUR_PLAYER.getEquip().get("MAGICAL").getStr()+" Mag:"+arena3.Arena.CUR_PLAYER.getEquip().get("MAGICAL").getMag()+" Dex:"+arena3.Arena.CUR_PLAYER.getEquip().get("MAGICAL").getDex());
        bowImageLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bowImageLabel2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bowImageLabel2MouseExited(evt);
            }
        });

        javax.swing.GroupLayout eqipmentPanelLayout = new javax.swing.GroupLayout(eqipmentPanel);
        eqipmentPanel.setLayout(eqipmentPanelLayout);
        eqipmentPanelLayout.setHorizontalGroup(
            eqipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eqipmentPanelLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(swordImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bowImageLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(staffImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        eqipmentPanelLayout.setVerticalGroup(
            eqipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eqipmentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(eqipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(swordImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(staffImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bowImageLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLayeredPane2.add(eqipmentPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 290, 310, 90));

        itemPanel3.setBackground(new java.awt.Color(0, 0, 0));
        itemPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ITEMS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 1, 14), new java.awt.Color(255, 255, 204))); // NOI18N

        jLayeredPane3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        potionQuantityLabel.setForeground(new java.awt.Color(255, 255, 255));
        potionQuantityLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        potionQuantityLabel.setText(arena3.Arena.CUR_PLAYER.getItems().get(Items.ABILITY.getName()).getQuantity()+"");
        potionQuantityLabel.setToolTipText("");
        jLayeredPane3.add(potionQuantityLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 30, 20));

        healthPotionButton.setBackground(new java.awt.Color(0, 0, 0));
        healthPotionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/healthPotionsm.png"))); // NOI18N
        healthPotionButton.setToolTipText("Restores "+arena3.Arena.CUR_PLAYER.getItems().get(Items.HEALTH.getName()).getHp()*100+"% of total HP"
        );
        healthPotionButton.setContentAreaFilled(false);
        healthPotionButton.setMaximumSize(new java.awt.Dimension(82, 82));
        healthPotionButton.setMinimumSize(new java.awt.Dimension(82, 82));
        healthPotionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                healthPotionButtonActionPerformed(evt);
            }
        });
        jLayeredPane3.add(healthPotionButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 80, 80));

        healthPotionLabel.setToolTipText("Potion: <<Heals 10% of Max HP>>");
        healthPotionLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        healthPotionLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                healthPotionLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                healthPotionLabelMouseExited(evt);
            }
        });
        jLayeredPane3.add(healthPotionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 80, 80));

        abilityQuantityLabel.setForeground(new java.awt.Color(255, 255, 255));
        abilityQuantityLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        abilityQuantityLabel.setText(arena3.Arena.CUR_PLAYER.getItems().get(Items.HEALTH.getName()).getQuantity()+"");
        abilityQuantityLabel.setToolTipText("");
        jLayeredPane3.add(abilityQuantityLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 0, 30, 20));

        abilityPotionButton.setBackground(new java.awt.Color(0, 0, 0));
        abilityPotionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/abilityPotion-removebg-.png"))); // NOI18N
        abilityPotionButton.setToolTipText("Restores "+arena3.Arena.CUR_PLAYER.getItems().get(Items.ABILITY.getName()).getMp()*100+"% of total MP"
        );
        abilityPotionButton.setContentAreaFilled(false);
        abilityPotionButton.setMaximumSize(new java.awt.Dimension(82, 82));
        abilityPotionButton.setMinimumSize(new java.awt.Dimension(82, 82));
        abilityPotionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abilityPotionButtonActionPerformed(evt);
            }
        });
        jLayeredPane3.add(abilityPotionButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 0, 80, 80));

        comboQuantityLabel.setForeground(new java.awt.Color(255, 255, 255));
        comboQuantityLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        comboQuantityLabel.setText(arena3.Arena.CUR_PLAYER.getItems().get(Items.COMBO.getName()).getQuantity()+"");
        comboQuantityLabel.setToolTipText("");
        comboQuantityLabel.setRequestFocusEnabled(false);
        comboQuantityLabel.setVerifyInputWhenFocusTarget(false);
        jLayeredPane3.add(comboQuantityLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 30, 20));

        comboPotionButton.setBackground(new java.awt.Color(0, 0, 0));
        comboPotionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ComboPotion.png"))); // NOI18N
        comboPotionButton.setToolTipText("Restores "+arena3.Arena.CUR_PLAYER.getItems().get(Items.COMBO.getName()).getHp()*100+"% of total HP and "+arena3.Arena.CUR_PLAYER.getItems().get(Items.COMBO.getName()).getMp()*100+"% of total AP"
        );
        comboPotionButton.setContentAreaFilled(false);
        comboPotionButton.setMaximumSize(new java.awt.Dimension(82, 82));
        comboPotionButton.setMinimumSize(new java.awt.Dimension(82, 82));
        comboPotionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPotionButtonActionPerformed(evt);
            }
        });
        jLayeredPane3.add(comboPotionButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 80, 80));

        wagerAmountLabel.setForeground(new java.awt.Color(255, 255, 255));
        wagerAmountLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        wagerAmountLabel.setText(Arena.CUR_PLAYER.getGoldWagered()+" G");
        wagerAmountLabel.setToolTipText("");
        jLayeredPane3.add(wagerAmountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 160, 70, 20));

        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jLayeredPane3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 80, 80));

        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jLayeredPane3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, 80, 80));

        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jLayeredPane3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 80, 80));

        abilityPotionLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jLayeredPane3.add(abilityPotionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 0, 80, 80));

        comboPotionLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        comboPotionLabel.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                comboPotionLabelAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jLayeredPane3.add(comboPotionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 80, 80));

        wagerLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/PokerChips.png"))); // NOI18N
        wagerLabel.setToolTipText("Rounds Wagered: "+Arena.CUR_PLAYER.getRoundsWagered()+"");
        jLayeredPane3.add(wagerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 160, 80, 80));

        jLabel8.setToolTipText("");
        jLayeredPane3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 160, 80, 80));

        jLabel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jLayeredPane3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 80, 80));

        jLabel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jLayeredPane3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 80, 80));

        javax.swing.GroupLayout itemPanel3Layout = new javax.swing.GroupLayout(itemPanel3);
        itemPanel3.setLayout(itemPanel3Layout);
        itemPanel3Layout.setHorizontalGroup(
            itemPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLayeredPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        itemPanel3Layout.setVerticalGroup(
            itemPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, itemPanel3Layout.createSequentialGroup()
                .addComponent(jLayeredPane3)
                .addContainerGap())
        );

        jLayeredPane2.add(itemPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 390, 310, 280));

        javax.swing.GroupLayout characterSheetLayout = new javax.swing.GroupLayout(characterSheet);
        characterSheet.setLayout(characterSheetLayout);
        characterSheetLayout.setHorizontalGroup(
            characterSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane2)
        );
        characterSheetLayout.setVerticalGroup(
            characterSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane2)
        );

        jLayeredPane1.add(characterSheet, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 0, 320, 720));

        heroXpBarLabel.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        heroXpBarLabel.setForeground(new java.awt.Color(255, 255, 255));
        heroXpBarLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        heroXpBarLabel.setText(arena3.Arena.CUR_PLAYER.getXp()+"/"+arena3.Arena.CUR_PLAYER.getTnl()
        );
        heroXpBarLabel.setAlignmentX(0.5F);
        jLayeredPane1.add(heroXpBarLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 690, 130, -1));

        heroMpBarLabel.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        heroMpBarLabel.setForeground(new java.awt.Color(255, 255, 255));
        heroMpBarLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        heroMpBarLabel.setText(arena3.Arena.CUR_PLAYER.getCurMp()+"/"+arena3.Arena.CUR_PLAYER.getMaxMp());
        heroMpBarLabel.setAlignmentX(0.5F);
        jLayeredPane1.add(heroMpBarLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 670, 130, -1));

        heroHpBarLabel.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        heroHpBarLabel.setForeground(new java.awt.Color(255, 255, 255));
        heroHpBarLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        heroHpBarLabel.setText(arena3.Arena.CUR_PLAYER.getCurHp()+"/"+arena3.Arena.CUR_PLAYER.getMaxHp());
        heroHpBarLabel.setAlignmentX(0.5F);
        heroHpBarLabel.setDoubleBuffered(true);
        heroHpBarLabel.setFocusable(false);
        jLayeredPane1.add(heroHpBarLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 650, 130, -1));

        heroXpBar.setBackground(new java.awt.Color(253, 122, 7));
        heroXpBar.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        heroXpBar.setForeground(new java.awt.Color(0, 0, 0));
        heroXpBar.setMaximum(arena3.Arena.CUR_PLAYER.getTnl());
        heroXpBar.setToolTipText("");
        heroXpBar.setValue(arena3.Arena.CUR_PLAYER.getTnl()-arena3.Arena.CUR_PLAYER.getXp()
        );
        heroXpBar.setAlignmentX(1.0F);
        heroXpBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        heroXpBar.setFocusable(false);
        heroXpBar.setOpaque(true);
        heroXpBar.setString("75/100");
        heroXpBar.setVerifyInputWhenFocusTarget(false);
        jLayeredPane1.add(heroXpBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 690, 310, 20));

        heroMpBar.setBackground(new java.awt.Color(75, 27, 240));
        heroMpBar.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        heroMpBar.setForeground(new java.awt.Color(0, 0, 0));
        heroMpBar.setMaximum(arena3.Arena.CUR_PLAYER.getMaxMp());
        heroMpBar.setToolTipText("");
        heroMpBar.setValue(arena3.Arena.CUR_PLAYER.getMaxMp()-arena3.Arena.CUR_PLAYER.getCurMp());
        heroMpBar.setAlignmentX(1.0F);
        heroMpBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        heroMpBar.setFocusable(false);
        heroMpBar.setOpaque(true);
        heroMpBar.setString("75/100");
        heroMpBar.setVerifyInputWhenFocusTarget(false);
        jLayeredPane1.add(heroMpBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 670, 310, 20));

        heroHpBar.setBackground(new java.awt.Color(206, 29, 29));
        heroHpBar.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        heroHpBar.setForeground(new java.awt.Color(0, 0, 0));
        heroHpBar.setMaximum(arena3.Arena.CUR_PLAYER.getMaxHp());
        heroHpBar.setToolTipText("");
        heroHpBar.setValue(arena3.Arena.CUR_PLAYER.getMaxHp()-arena3.Arena.CUR_PLAYER.getCurHp());
        heroHpBar.setAlignmentX(1.0F);
        heroHpBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        heroHpBar.setFocusable(false);
        heroHpBar.setOpaque(true);
        heroHpBar.setString("75/100");
        heroHpBar.setVerifyInputWhenFocusTarget(false);
        jLayeredPane1.add(heroHpBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 650, 310, 20));

        BackGround.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ArenaExt.PNG"))); // NOI18N
        jLayeredPane1.add(BackGround, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1260, 720));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onlineArenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onlineArenaActionPerformed

//        SwingWorker<String, Void> worker = new SwingWorker<String, Void>(){
//            @Override
//            protected String doInBackground() throws Exception {
////                arenaClient.run();
////                servReq = arenaClient.recieve();
////                //ac.procPack(servReq);
////                return arenaClient.procPack(servReq);
////            }  
//            @Override
//            protected void done(){
//                try {
//                    String command = get();
//
//                    servReq = command;
//                    switch(servReq){
//                        case "oce":
//                            //arenaFrame = new ArenaFrame(arenaClient, true);
//                            arenaFrame.setVisible(true);
//                            dispose();
//                        break;
//                    }  
//                } catch (InterruptedException | ExecutionException ex) {}
//            }
//        };
//        worker.execute();
//        onlineArena.setText("WAITING...");
//
//
//        //ac.run();
//        
//        //servReq = arenaClient.recieve();
//
//        //switch(arenaClient.procPack(servReq)){
//           // case "oce":
//               //af = new ArenaFrame(arenaClient, true);
//               //af.setVisible(true);
//              // this.dispose();
//              // break;
//        //}    
    }//GEN-LAST:event_onlineArenaActionPerformed

    /**
     * Moves player to the arena frame on button click
     * @param evt - left click on button
     */
    private void enterArenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterArenaActionPerformed
        
        audioPlayerOne.playOnce(2); 
        try {
            audioPlayer.stop();
            this.audioPlayer.shutDown();
            ArenaFrame arenaframe = new ArenaFrame();
            arenaframe.setVisible(true);
            dispose();
        } 
        catch (UnsupportedAudioFileException | IOException 
                | LineUnavailableException ex) {}
    }//GEN-LAST:event_enterArenaActionPerformed

    /**
     * Moves player back to the travel frame on click
     * @param evt - left click on button
     */
    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        
        audioPlayerOne.playOnce(1);
        try {
            TravelFrame travelFrame = new TravelFrame();
            this.audioPlayer.stop();
            this.audioPlayer.shutDown();
            travelFrame.setVisible(true);
            dispose();
        } 
        catch (UnsupportedAudioFileException | LineUnavailableException 
                | IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_ExitActionPerformed

    /**
     * Displays wager frame, also disables the wager spinner text boxes from 
     * direct editing. 
     * @param evt - left click on button
     */
    private void wagerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wagerButtonActionPerformed

        audioPlayerOne.playOnce(2);
        JFormattedTextField wagerSpinnerTextField = ((JSpinner.DefaultEditor) 
                wagerSpinner.getEditor()).getTextField();
        wagerSpinnerTextField.setEditable(false);
        JFormattedTextField wagerRoundSpinnerTextField = 
                ((JSpinner.DefaultEditor) wagerRoundSpinner.getEditor()).
                        getTextField();
        wagerRoundSpinnerTextField.setEditable(false);
        wagerFrame.setVisible(true);
    }//GEN-LAST:event_wagerButtonActionPerformed

    /**
     * Sets the bet to active, adjusts player's current gold, updates the form, 
     * and closes the wager frame.
     * @param evt - left click on button
     */
    private void placeBetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placeBetButtonActionPerformed
        
        audioPlayerOne.playOnce(24);
        this.wagerButton.setEnabled(false);
        Arena.CUR_PLAYER.setBetActive(true);
        Arena.CUR_PLAYER.setGold(Arena.CUR_PLAYER.getGold()-Arena.CUR_PLAYER.getGoldWagered());
        updateForm();
        wagerFrame.setVisible(false); 
            
    }//GEN-LAST:event_placeBetButtonActionPerformed

    /**
     * closes the wager frame without setting a bet, and clears round and wager
     * from the player's bet
     * @param evt 
     */
    private void exitWagerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitWagerButtonActionPerformed
        audioPlayerOne.playOnce(1);
        Arena.CUR_PLAYER.setGoldWagered(0, 0);
        Arena.CUR_PLAYER.setRoundsWagered(0, 0);
        wagerFrame.setVisible(false);
    }//GEN-LAST:event_exitWagerButtonActionPerformed


    private void wagerSpinnerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wagerSpinnerMouseClicked
       
    }//GEN-LAST:event_wagerSpinnerMouseClicked

    /**
     * Uses the selected ability from the list if it has use outside of combat
     * if the player has enough AP.  Plays the appropriate effects for the 
     * ability, updates the form to reflect changes to the player from the
     * ability use. 
     * @param evt - left click on the ability.
     */
    private void abilityListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_abilityListMouseClicked

        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>(){
            @Override
            protected Void doInBackground() throws Exception {
                //gets the selected ability
                if(abilityList.getModel().getSize() > 0){
                    int selection = abilityList.getSelectedIndex();
                    ListModel<String> listModel = abilityList.getModel();
                    String selectedAbilityInfo = listModel.
                    getElementAt(selection);
                    String[] selectedAbilityName = selectedAbilityInfo.
                    split(":");
                    String trimmedSelectedAbilityName = selectedAbilityName[0].
                    trim();
                    if(!(Arena.CUR_PLAYER.yaDumz((int)(Arena.CUR_PLAYER.
                            getAbilites().get(trimmedSelectedAbilityName).
                            getCost()*Arena.CUR_PLAYER.getMaxMp())))){
                        Map<String, Integer> ability = Arena.CUR_PLAYER.
                        getAbilites().
                        get(trimmedSelectedAbilityName).
                        use(Arena.CUR_PLAYER);
                        updateForm();
                            if(ability != null){
                                audioPlayerOne.playEffect(Arena.CUR_PLAYER.
                                    getAbilites().
                                    get(trimmedSelectedAbilityName).
                                    getSoundFiles());
                            }
                            else{
                                audioPlayerOne.playOnce(16);
                            }
                    }
                    else{
                        audioPlayerOne.playOnce(16);
                    }
                }
            return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_abilityListMouseClicked

    private void swordImageLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_swordImageLabelMouseEntered

    }//GEN-LAST:event_swordImageLabelMouseEntered

    private void swordImageLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_swordImageLabelMouseExited

    }//GEN-LAST:event_swordImageLabelMouseExited

    private void staffImageLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_staffImageLabelMouseEntered

    }//GEN-LAST:event_staffImageLabelMouseEntered

    private void staffImageLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_staffImageLabelMouseExited

    }//GEN-LAST:event_staffImageLabelMouseExited

    private void bowImageLabel2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bowImageLabel2MouseEntered

    }//GEN-LAST:event_bowImageLabel2MouseEntered

    private void bowImageLabel2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bowImageLabel2MouseExited

    }//GEN-LAST:event_bowImageLabel2MouseExited

    /**
     * If the player has 1 or more health potion, uses a health potion and 
     * plays the appropriate sound effects, decrements health potion quantity,
     * and updates form to display changes made to the player. 
     * @param evt - left click on button.
     */
    private void healthPotionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_healthPotionButtonActionPerformed

        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>(){
            @Override
            protected Void doInBackground() throws Exception {
                if(Arena.CUR_PLAYER.getItems().get(Items.HEALTH.getName()).
                        getQuantity()>0){
                    audioPlayerOne.playEffect(Arena.CUR_PLAYER.getItems().
                            get(Items.HEALTH.getName()).getSoundFiles());
                    Arena.CUR_PLAYER.getItems().get(Items.HEALTH.getName()).
                    use(Arena.CUR_PLAYER);
                    updateForm();
                }
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_healthPotionButtonActionPerformed

    private void healthPotionLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_healthPotionLabelMouseEntered

    }//GEN-LAST:event_healthPotionLabelMouseEntered

    private void healthPotionLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_healthPotionLabelMouseExited

    }//GEN-LAST:event_healthPotionLabelMouseExited

     /**
     * If the player has 1 or more ability potion, uses a ability potion and 
     * plays the appropriate sound effects, decrements ability potion quantity,
     * and updates form to display changes made to the player. 
     * @param evt - left click on button.
     */
    private void abilityPotionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abilityPotionButtonActionPerformed

        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>(){
            @Override
            protected Void doInBackground() throws Exception {
                if(Arena.CUR_PLAYER.getItems().get(Items.ABILITY.getName()).
                        getQuantity()>0){
                    audioPlayerOne.playEffect(Arena.CUR_PLAYER.getItems().
                            get(Items.ABILITY.getName()).getSoundFiles());
                    Arena.CUR_PLAYER.getItems().get(Items.ABILITY.getName()).
                    use(Arena.CUR_PLAYER);
                    updateForm();
                }
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_abilityPotionButtonActionPerformed

     /**
     * If the player has 1 or more combo potion, uses a combo potion and 
     * plays the appropriate sound effects, decrements combo potion quantity,
     * and updates form to display changes made to the player. 
     * @param evt - left click on button.
     */
    private void comboPotionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPotionButtonActionPerformed

        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>(){

            @Override
            protected Void doInBackground() throws Exception {

                if(Arena.CUR_PLAYER.getItems().get(Items.COMBO.getName()).
                    getQuantity()>0){
                    audioPlayerOne.playEffect(Arena.CUR_PLAYER.getItems().
                        get(Items.COMBO.getName()).getSoundFiles());
                    Arena.CUR_PLAYER.getItems().get(Items.COMBO.getName()).
                    use(Arena.CUR_PLAYER);
                    updateForm();
                }
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_comboPotionButtonActionPerformed

    private void comboPotionLabelAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_comboPotionLabelAncestorAdded

    }//GEN-LAST:event_comboPotionLabelAncestorAdded

    /**
    * Updates player's bet, plays appropriate sounds, enables and disables place
    * bet button based if the player has the gold to cover the wager.
    * @param evt the state of the spinner is changed. 
    */
    private void wagerSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_wagerSpinnerStateChanged
        
        audioPlayerOne.playOnce(23);
        Arena.CUR_PLAYER.setGoldWagered((int)(wagerSpinner.getValue()), 
                (int)(wagerRoundSpinner.getValue()));
        this.winningLabel.setText(Arena.CUR_PLAYER.getPayOut()+"");
        if(Arena.CUR_PLAYER.yaBroke((int)(wagerSpinner.getValue()))){
            this.placeBetButton.setEnabled(false);
        }
        else{
            this.placeBetButton.setEnabled(true);
        }
    }//GEN-LAST:event_wagerSpinnerStateChanged
    
    /**
     * Updates player's bet, plays appropriate sounds.
     * @param evt the state of the spinner is changed. 
     */
    private void wagerRoundSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_wagerRoundSpinnerStateChanged
        
        audioPlayerOne.playOnce(23);
        Arena.CUR_PLAYER.setRoundsWagered((int)(wagerSpinner.getValue()), 
                (int)(wagerRoundSpinner.getValue()));
        this.winningLabel.setText(Arena.CUR_PLAYER.getPayOut()+"");
    }//GEN-LAST:event_wagerRoundSpinnerStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ArenaExtFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ArenaExtFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ArenaExtFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ArenaExtFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ArenaExtFrame().setVisible(true);
            }
        });
    }
    
    /**
     * Method that updates all appropriate form objects
     */
    public void updateForm(){

       SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>(){  
            @Override
            protected Void doInBackground() throws Exception {
                Arena.CUR_PLAYER.roleAdjust();
                roleLabel.setText(Arena.CUR_PLAYER.getRole());
                System.out.println("is knowing my role "+Arena.CUR_PLAYER.
                        getRole());
                setAbilityList();
                levelLabel.setText("LEVEL: "+Arena.CUR_PLAYER.getLevel());
                heroHpBarLabel.setText(Arena.CUR_PLAYER.getCurHp()+"/"
                        +Arena.CUR_PLAYER.getMaxHp());
                heroMpBarLabel.setText(Arena.CUR_PLAYER.getCurMp()+"/"
                        +Arena.CUR_PLAYER.getMaxMp());
                heroXpBarLabel.setText(Arena.CUR_PLAYER.getXp()+"/"
                        +Arena.CUR_PLAYER.getTnl());
                heroHpBar.setMaximum(Arena.CUR_PLAYER.getMaxHp());
                heroHpBar.setValue(Arena.CUR_PLAYER.getMaxHp()- 
                        Arena.CUR_PLAYER.getCurHp());
                heroMpBar.setMaximum(Arena.CUR_PLAYER.getMaxMp());
                heroMpBar.setValue(Arena.CUR_PLAYER.getMaxMp()- 
                        Arena.CUR_PLAYER.getCurMp());
                heroXpBar.setMaximum(Arena.CUR_PLAYER.getTnl());
                heroXpBar.setValue(Arena.CUR_PLAYER.getTnl() - 
                        Arena.CUR_PLAYER.getXp());
                heroStrLabel.setText("STR: "+Arena.CUR_PLAYER.getStr());
                heroIntLabel.setText("INT: "+Arena.CUR_PLAYER.getMag());
                heroDexLabel.setText("DEX: "+Arena.CUR_PLAYER.getDex());
                potionQuantityLabel.setText(Arena.CUR_PLAYER.getItems().
                        get(Items.HEALTH.getName()).getQuantity()+"");
                abilityQuantityLabel.setText(Arena.CUR_PLAYER.getItems().
                        get(Items.ABILITY.getName()).getQuantity()+"");
                comboQuantityLabel.setText(Arena.CUR_PLAYER.getItems().
                        get(Items.COMBO.getName()).getQuantity()+"");
                xpCreditsLabel.setText(Arena.CUR_PLAYER.getXpCredits()+"");
                goldAmountLabel.setText(Arena.CUR_PLAYER.getGold()+"");
                wagerAmountLabel.setText(Arena.CUR_PLAYER.getGoldWagered()+"");
                wagerLabel.setToolTipText("Rounds Wagered: "+Arena.CUR_PLAYER.
                        getRoundsWagered()+"");
                return null;
            }
        };
    worker.execute();
    }

    /**
     * Set the ability list component to the current player's abilities
     */
    public void setAbilityList(){
      Vector<String> abilities = new Vector<>();
      if(Arena.CUR_PLAYER.getRole().equals(Roles.PHYSICAL.getRole())){
          for(Map.Entry<String,Ability> entrySet: Arena.CUR_PLAYER.getAbilites()
                  .entrySet()){
              if(entrySet.getValue().getType().equals("Physical")){
                  abilities.add(entrySet.getKey()+":        (AP  "+(int)
                          (Arena.CUR_PLAYER.getMaxMp()*entrySet.getValue()
                                  .getCost())+")");
              }    
          }    
      }
      else if(Arena.CUR_PLAYER.getRole().equals(Roles.MAGICAL.getRole())){
          for(Map.Entry<String,Ability> entrySet: Arena.CUR_PLAYER.getAbilites()
                  .entrySet()){
              if(entrySet.getValue().getType().equals("Magical")){
                  abilities.add(entrySet.getKey()+":        (AP  "+(int)
                          (Arena.CUR_PLAYER.getMaxMp()*entrySet.getValue()
                                  .getCost())+")");
              }    
          } 
      }
      else if(Arena.CUR_PLAYER.getRole().equals(Roles.RANGED.getRole())){
          for(Map.Entry<String,Ability> entrySet: Arena.CUR_PLAYER.getAbilites()
                  .entrySet()){
              if(entrySet.getValue().getType().equals("Ranged")){
                  abilities.add(entrySet.getKey()+":        (AP  "+(int)
                          (Arena.CUR_PLAYER.getMaxMp()*entrySet.getValue()
                                  .getCost())+")");
              }    
          } 
      }
      else{
          for(Map.Entry<String,Ability> entrySet: Arena.CUR_PLAYER.getAbilites()
                  .entrySet()){
              if(entrySet.getValue().getType().equals("Balanced")){
                  abilities.add(entrySet.getKey()+":        (AP  "+(int)
                          (Arena.CUR_PLAYER.getMaxMp()*entrySet.getValue()
                                  .getCost())+")");
              }    
          } 
      }
      abilityList.setListData(abilities);
  }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BackGround;
    private javax.swing.JButton Exit;
    private javax.swing.JLayeredPane WageFrame;
    private javax.swing.JList<String> abilityList;
    private javax.swing.JPanel abilityPanel;
    private javax.swing.JButton abilityPotionButton;
    private javax.swing.JLabel abilityPotionLabel;
    private javax.swing.JLabel abilityQuantityLabel;
    private javax.swing.JScrollPane abilityScrollPane;
    private javax.swing.JLabel bowImageLabel2;
    private javax.swing.JPanel characterSheet;
    private javax.swing.JButton comboPotionButton;
    private javax.swing.JLabel comboPotionLabel;
    private javax.swing.JLabel comboQuantityLabel;
    private javax.swing.JButton enterArena;
    private javax.swing.JPanel eqipmentPanel;
    private javax.swing.JButton exitWagerButton;
    private javax.swing.JLabel expLabel;
    private javax.swing.JLabel goldAmountLabel;
    private javax.swing.JLabel goldLabel;
    private javax.swing.JButton healthPotionButton;
    private javax.swing.JLabel healthPotionLabel;
    private javax.swing.JLabel heroDexLabel;
    private javax.swing.JProgressBar heroHpBar;
    private javax.swing.JLabel heroHpBarLabel;
    private javax.swing.JLabel heroIntLabel;
    private javax.swing.JProgressBar heroMpBar;
    private javax.swing.JLabel heroMpBarLabel;
    private javax.swing.JLabel heroStrLabel;
    private javax.swing.JProgressBar heroXpBar;
    private javax.swing.JLabel heroXpBarLabel;
    private javax.swing.JPanel itemPanel3;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JLabel levelLabel;
    private javax.swing.JButton onlineArena;
    private javax.swing.JButton placeBetButton;
    private javax.swing.JLabel potionQuantityLabel;
    private javax.swing.JLabel roleLabel;
    private javax.swing.JLabel staffImageLabel;
    private javax.swing.JLabel swordImageLabel;
    private javax.swing.JLabel wageBackGround;
    private javax.swing.JLabel wagerAmountLabel;
    private javax.swing.JButton wagerButton;
    private javax.swing.JPanel wagerFrame;
    private javax.swing.JLabel wagerLabel;
    private javax.swing.JSpinner wagerRoundSpinner;
    private javax.swing.JLabel wagerRoundSpinnerLabel;
    private javax.swing.JSpinner wagerSpinner;
    private javax.swing.JLabel wagerSpinnerLabel;
    private javax.swing.JLabel winningLabel;
    private javax.swing.JLabel winningsLabelLabel;
    private javax.swing.JLabel xpCreditsLabel;
    // End of variables declaration//GEN-END:variables
}
