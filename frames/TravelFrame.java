/* 
 * Starting point that allows navigaion to other menus.
 */

package frames;

import arena3.Arena;
import utilities.FrameManipulator;
import collections.*;
import java.io.IOException;
import java.util.Map;
import java.util.Vector;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.ListModel;
import javax.swing.SwingWorker;
import utilities.AudioPlayer;
import abilities.Ability;

/**
 * @author Scott Underwood
 * @author Shawn Ferdig
 */
public class TravelFrame extends javax.swing.JFrame {
    
   private AudioPlayer audioPlayer;
   private AudioPlayer audioPlayerOne;
   private final FrameManipulator frameManipulater;
    
   /**
     * Creates new TravelFrame
     */
    public TravelFrame() {
        
        initComponents();
        try{
            audioPlayer = new AudioPlayer();
            audioPlayerOne = new AudioPlayer();
        }
        catch(IOException | LineUnavailableException | 
                UnsupportedAudioFileException e){
            System.out.println("Error 111");
        }
        audioPlayerOne.setTrack(18);
        audioPlayerOne.play();
        audioPlayerOne.volume(-10.0f);
        frameManipulater = new FrameManipulator();
        frameManipulater.centeredFrame(this);
        updateForm();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        trainingButton = new javax.swing.JButton();
        StoreButton = new javax.swing.JButton();
        ArenaExteriorButton = new javax.swing.JButton();
        ExitButton = new javax.swing.JButton();
        InnButton2 = new javax.swing.JButton();
        characterSheet = new javax.swing.JPanel();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        xpCreditsLabel = new javax.swing.JLabel();
        expLabel = new javax.swing.JLabel();
        goldAmountLabel = new javax.swing.JLabel();
        goldLabel = new javax.swing.JLabel();
        heroDexLabel = new javax.swing.JLabel();
        heroIntLabel = new javax.swing.JLabel();
        heroStrLabel = new javax.swing.JLabel();
        levelLabel = new javax.swing.JLabel();
        roleLabel = new javax.swing.JLabel();
        abilityPanel = new javax.swing.JPanel();
        abilityScrollPane = new javax.swing.JScrollPane();
        abilityList = new javax.swing.JList<>();
        eqipmentPanel = new javax.swing.JPanel();
        swordImageLabel = new javax.swing.JLabel();
        staffImageLabel = new javax.swing.JLabel();
        bowImageLabel2 = new javax.swing.JLabel();
        itemPanel3 = new javax.swing.JPanel();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        potionQuantityLabel = new javax.swing.JLabel();
        healthPotionButton = new javax.swing.JButton();
        healthPotionLabel = new javax.swing.JLabel();
        abilityQuantityLabel = new javax.swing.JLabel();
        abilityPotionButton = new javax.swing.JButton();
        comboQuantityLabel = new javax.swing.JLabel();
        comboPotionButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        abilityPotionLabel = new javax.swing.JLabel();
        comboPotionLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        wagerAmountLabel = new javax.swing.JLabel();
        wagerLabel = new javax.swing.JLabel();
        heroXpBarLabel = new javax.swing.JLabel();
        heroMpBarLabel = new javax.swing.JLabel();
        heroHpBarLabel = new javax.swing.JLabel();
        heroXpBar = new javax.swing.JProgressBar();
        heroMpBar = new javax.swing.JProgressBar();
        heroHpBar = new javax.swing.JProgressBar();
        BackGround = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLayeredPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLayeredPane1.setDoubleBuffered(true);
        jLayeredPane1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        trainingButton.setBackground(new java.awt.Color(0, 0, 255));
        trainingButton.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        trainingButton.setForeground(new java.awt.Color(0, 0, 0));
        trainingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/weathered-wood (2).jpg"))); // NOI18N
        trainingButton.setText("Trainers");
        trainingButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 0), 1, true));
        trainingButton.setDisabledIcon(null);
        trainingButton.setFocusable(false);
        trainingButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        trainingButton.setIconTextGap(0);
        trainingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainingButtonActionPerformed(evt);
            }
        });
        jLayeredPane1.add(trainingButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 550, 140, 40));

        StoreButton.setBackground(new java.awt.Color(0, 0, 255));
        StoreButton.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        StoreButton.setForeground(new java.awt.Color(0, 0, 0));
        StoreButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/weathered-wood (2).jpg"))); // NOI18N
        StoreButton.setText("Shop");
        StoreButton.setToolTipText("");
        StoreButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 0), 1, true));
        StoreButton.setFocusPainted(false);
        StoreButton.setFocusable(false);
        StoreButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        StoreButton.setIconTextGap(0);
        StoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StoreButtonActionPerformed(evt);
            }
        });
        jLayeredPane1.add(StoreButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 500, 140, 40));

        ArenaExteriorButton.setBackground(new java.awt.Color(0, 0, 255));
        ArenaExteriorButton.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        ArenaExteriorButton.setForeground(new java.awt.Color(0, 0, 0));
        ArenaExteriorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/weathered-wood (2).jpg"))); // NOI18N
        ArenaExteriorButton.setText("Arena");
        ArenaExteriorButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 51), 1, true));
        ArenaExteriorButton.setFocusPainted(false);
        ArenaExteriorButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ArenaExteriorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArenaExteriorButtonActionPerformed(evt);
            }
        });
        jLayeredPane1.add(ArenaExteriorButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 600, 140, 40));

        ExitButton.setBackground(new java.awt.Color(0, 0, 255));
        ExitButton.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        ExitButton.setForeground(new java.awt.Color(0, 0, 0));
        ExitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/weathered-wood (2).jpg"))); // NOI18N
        ExitButton.setText("Main Menu");
        ExitButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 51), 1, true));
        ExitButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });
        jLayeredPane1.add(ExitButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 650, 140, 40));

        InnButton2.setBackground(new java.awt.Color(0, 0, 255));
        InnButton2.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        InnButton2.setForeground(new java.awt.Color(0, 0, 0));
        InnButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/weathered-wood (2).jpg"))); // NOI18N
        InnButton2.setText("Inn");
        InnButton2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 0), 1, true));
        InnButton2.setContentAreaFilled(false);
        InnButton2.setDisabledIcon(null);
        InnButton2.setFocusable(false);
        InnButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        InnButton2.setIconTextGap(0);
        InnButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InnButton2ActionPerformed(evt);
            }
        });
        jLayeredPane1.add(InnButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 450, 140, 40));

        characterSheet.setBackground(new java.awt.Color(0, 0, 0));
        characterSheet.setBorder(javax.swing.BorderFactory.createTitledBorder(null, arena3.Arena.CUR_PLAYER.getName(), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Century Gothic", 1, 24), new java.awt.Color(255, 255, 204))); // NOI18N
        characterSheet.setForeground(new java.awt.Color(255, 255, 204));

        jLayeredPane2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        xpCreditsLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        xpCreditsLabel.setForeground(new java.awt.Color(255, 255, 255));
        xpCreditsLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        xpCreditsLabel.setText(Integer.toString(arena3.Arena.CUR_PLAYER.getXpCredits()));
        jLayeredPane2.add(xpCreditsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 100, 40));

        expLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        expLabel.setForeground(new java.awt.Color(255, 255, 255));
        expLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        expLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/smallHourGlass-removebg-preview.png"))); // NOI18N
        expLabel.setToolTipText("XP Tokens");
        jLayeredPane2.add(expLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, 50, 40));

        goldAmountLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        goldAmountLabel.setForeground(new java.awt.Color(255, 255, 255));
        goldAmountLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        goldAmountLabel.setText(Integer.toString(arena3.Arena.CUR_PLAYER.getGold()));
        jLayeredPane2.add(goldAmountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, 100, 40));

        goldLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        goldLabel.setForeground(new java.awt.Color(255, 255, 255));
        goldLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        goldLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stacked-coin-14-removebg.png"))); // NOI18N
        goldLabel.setToolTipText("Gold");
        jLayeredPane2.add(goldLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 80, 80, 40));

        heroDexLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        heroDexLabel.setForeground(new java.awt.Color(51, 153, 0));
        heroDexLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        heroDexLabel.setText("DEX: "+Integer.toString(arena3.Arena.CUR_PLAYER.getDex()));
        heroDexLabel.setRequestFocusEnabled(false);
        jLayeredPane2.add(heroDexLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 40, 90, 40));

        heroIntLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        heroIntLabel.setForeground(new java.awt.Color(0, 51, 204));
        heroIntLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        heroIntLabel.setText("INT: "+Integer.toString(arena3.Arena.CUR_PLAYER.getMag()));
        jLayeredPane2.add(heroIntLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 40, 90, 40));

        heroStrLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        heroStrLabel.setForeground(new java.awt.Color(255, 0, 51));
        heroStrLabel.setText("STR: "+Integer.toString(arena3.Arena.CUR_PLAYER.getStr()));
        jLayeredPane2.add(heroStrLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 90, 40));

        levelLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        levelLabel.setForeground(new java.awt.Color(255, 255, 255));
        levelLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        levelLabel.setText("LEVEL: "+Integer.toString(arena3.Arena.CUR_PLAYER.getLevel()));
        jLayeredPane2.add(levelLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 160, 40));

        roleLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        roleLabel.setForeground(new java.awt.Color(255, 255, 255));
        roleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        roleLabel.setText(arena3.Arena.CUR_PLAYER.getRole());
        jLayeredPane2.add(roleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 130, 40));

        abilityPanel.setBackground(new java.awt.Color(0, 0, 0));
        abilityPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ABILITIES", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 1, 14), new java.awt.Color(255, 255, 204))); // NOI18N
        abilityPanel.setForeground(new java.awt.Color(255, 255, 255));

        abilityList.setBackground(new java.awt.Color(0, 0, 0));
        abilityList.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        abilityList.setForeground(new java.awt.Color(255, 255, 255));
        abilityList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Cure", "Barrier", "Magic Missle", "Slow", "Pinning Shot", "Kill Bill", "FIre Ball", "Cover" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        abilityList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        abilityList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                abilityListMouseClicked(evt);
            }
        });
        abilityScrollPane.setViewportView(abilityList);

        javax.swing.GroupLayout abilityPanelLayout = new javax.swing.GroupLayout(abilityPanel);
        abilityPanel.setLayout(abilityPanelLayout);
        abilityPanelLayout.setHorizontalGroup(
            abilityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(abilityScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
        );
        abilityPanelLayout.setVerticalGroup(
            abilityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(abilityScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
        );

        jLayeredPane2.add(abilityPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 130, 310, 160));

        eqipmentPanel.setBackground(new java.awt.Color(0, 0, 0));
        eqipmentPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "EQUIPMENT", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 1, 14), new java.awt.Color(255, 255, 204))); // NOI18N

        swordImageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        swordImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/notSoTinySword.png"))); // NOI18N
        swordImageLabel.setToolTipText(Arena.CUR_PLAYER.getEquip().get("PHYSICAL").getName().toUpperCase()+"     Str:"+Arena.CUR_PLAYER.getEquip().get("PHYSICAL").getStr()+" Mag:"+arena3.Arena.CUR_PLAYER.getEquip().get("PHYSICAL").getMag()+" Dex:"+arena3.Arena.CUR_PLAYER.getEquip().get("PHYSICAL").getDex()
        );
        swordImageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                swordImageLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                swordImageLabelMouseExited(evt);
            }
        });

        staffImageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        staffImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bowSecondGo-removebg.png"))); // NOI18N
        staffImageLabel.setToolTipText(Arena.CUR_PLAYER.getEquip().get("RANGED").getName().toUpperCase()+"     Str:"+arena3.Arena.CUR_PLAYER.getEquip().get("RANGED").getStr()+" Mag:"+arena3.Arena.CUR_PLAYER.getEquip().get("RANGED").getMag()+" Dex:"+arena3.Arena.CUR_PLAYER.getEquip().get("RANGED").getDex());
        staffImageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                staffImageLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                staffImageLabelMouseExited(evt);
            }
        });

        bowImageLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bowImageLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/GemsfirstSecondgo.png"))); // NOI18N
        bowImageLabel2.setToolTipText(Arena.CUR_PLAYER.getEquip().get("MAGICAL").getName().toUpperCase()+"     Str:"+arena3.Arena.CUR_PLAYER.getEquip().get("MAGICAL").getStr()+" Mag:"+arena3.Arena.CUR_PLAYER.getEquip().get("MAGICAL").getMag()+" Dex:"+arena3.Arena.CUR_PLAYER.getEquip().get("MAGICAL").getDex());
        bowImageLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bowImageLabel2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bowImageLabel2MouseExited(evt);
            }
        });

        javax.swing.GroupLayout eqipmentPanelLayout = new javax.swing.GroupLayout(eqipmentPanel);
        eqipmentPanel.setLayout(eqipmentPanelLayout);
        eqipmentPanelLayout.setHorizontalGroup(
            eqipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eqipmentPanelLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(swordImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bowImageLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(staffImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        eqipmentPanelLayout.setVerticalGroup(
            eqipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eqipmentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(eqipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(swordImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(staffImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bowImageLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLayeredPane2.add(eqipmentPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 290, 310, 90));

        itemPanel3.setBackground(new java.awt.Color(0, 0, 0));
        itemPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ITEMS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 1, 14), new java.awt.Color(255, 255, 204))); // NOI18N

        jLayeredPane3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        potionQuantityLabel.setForeground(new java.awt.Color(255, 255, 255));
        potionQuantityLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        potionQuantityLabel.setText(arena3.Arena.CUR_PLAYER.getItems().get(Items.ABILITY.getName()).getQuantity()+"");
        potionQuantityLabel.setToolTipText("");
        jLayeredPane3.add(potionQuantityLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 30, 20));

        healthPotionButton.setBackground(new java.awt.Color(0, 0, 0));
        healthPotionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/healthPotionsm.png"))); // NOI18N
        healthPotionButton.setToolTipText("Restores "+arena3.Arena.CUR_PLAYER.getItems().get(Items.HEALTH.getName()).getHp()*100+"% of total HP"
        );
        healthPotionButton.setContentAreaFilled(false);
        healthPotionButton.setMaximumSize(new java.awt.Dimension(82, 82));
        healthPotionButton.setMinimumSize(new java.awt.Dimension(82, 82));
        healthPotionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                healthPotionButtonActionPerformed(evt);
            }
        });
        jLayeredPane3.add(healthPotionButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 80, 80));

        healthPotionLabel.setToolTipText("Potion: <<Heals 10% of Max HP>>");
        healthPotionLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        healthPotionLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                healthPotionLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                healthPotionLabelMouseExited(evt);
            }
        });
        jLayeredPane3.add(healthPotionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 80, 80));

        abilityQuantityLabel.setForeground(new java.awt.Color(255, 255, 255));
        abilityQuantityLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        abilityQuantityLabel.setText(arena3.Arena.CUR_PLAYER.getItems().get(Items.HEALTH.getName()).getQuantity()+"");
        abilityQuantityLabel.setToolTipText("");
        jLayeredPane3.add(abilityQuantityLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 0, 30, 20));

        abilityPotionButton.setBackground(new java.awt.Color(0, 0, 0));
        abilityPotionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/abilityPotion-removebg-.png"))); // NOI18N
        abilityPotionButton.setToolTipText("Restores "+arena3.Arena.CUR_PLAYER.getItems().get(Items.ABILITY.getName()).getMp()*100+"% of total MP"
        );
        abilityPotionButton.setContentAreaFilled(false);
        abilityPotionButton.setMaximumSize(new java.awt.Dimension(82, 82));
        abilityPotionButton.setMinimumSize(new java.awt.Dimension(82, 82));
        abilityPotionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abilityPotionButtonActionPerformed(evt);
            }
        });
        jLayeredPane3.add(abilityPotionButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 0, 80, 80));

        comboQuantityLabel.setForeground(new java.awt.Color(255, 255, 255));
        comboQuantityLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        comboQuantityLabel.setText(arena3.Arena.CUR_PLAYER.getItems().get(Items.COMBO.getName()).getQuantity()+"");
        comboQuantityLabel.setToolTipText("");
        comboQuantityLabel.setRequestFocusEnabled(false);
        comboQuantityLabel.setVerifyInputWhenFocusTarget(false);
        jLayeredPane3.add(comboQuantityLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 30, 20));

        comboPotionButton.setBackground(new java.awt.Color(0, 0, 0));
        comboPotionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ComboPotion.png"))); // NOI18N
        comboPotionButton.setToolTipText("Restores "+arena3.Arena.CUR_PLAYER.getItems().get(Items.COMBO.getName()).getHp()*100+"% of total HP and "+arena3.Arena.CUR_PLAYER.getItems().get(Items.COMBO.getName()).getMp()*100+"% of total AP"
        );
        comboPotionButton.setContentAreaFilled(false);
        comboPotionButton.setMaximumSize(new java.awt.Dimension(82, 82));
        comboPotionButton.setMinimumSize(new java.awt.Dimension(82, 82));
        comboPotionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPotionButtonActionPerformed(evt);
            }
        });
        jLayeredPane3.add(comboPotionButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 80, 80));

        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jLayeredPane3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 80, 80));

        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jLayeredPane3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, 80, 80));

        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jLayeredPane3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 80, 80));

        abilityPotionLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jLayeredPane3.add(abilityPotionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 0, 80, 80));

        comboPotionLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        comboPotionLabel.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                comboPotionLabelAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jLayeredPane3.add(comboPotionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 80, 80));
        jLayeredPane3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 160, 80, 80));

        jLabel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jLayeredPane3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 80, 80));

        jLabel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jLayeredPane3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 80, 80));

        wagerAmountLabel.setForeground(new java.awt.Color(255, 255, 255));
        wagerAmountLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        wagerAmountLabel.setText(Arena.CUR_PLAYER.getGoldWagered()+" G");
        wagerAmountLabel.setToolTipText("");
        jLayeredPane3.add(wagerAmountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 160, 70, 20));

        wagerLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/PokerChips.png"))); // NOI18N
        wagerLabel.setToolTipText("Rounds Wagared: "+Arena.CUR_PLAYER.getRoundsWagered()+"");
        jLayeredPane3.add(wagerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 160, 80, 80));

        javax.swing.GroupLayout itemPanel3Layout = new javax.swing.GroupLayout(itemPanel3);
        itemPanel3.setLayout(itemPanel3Layout);
        itemPanel3Layout.setHorizontalGroup(
            itemPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLayeredPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        itemPanel3Layout.setVerticalGroup(
            itemPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, itemPanel3Layout.createSequentialGroup()
                .addComponent(jLayeredPane3)
                .addContainerGap())
        );

        jLayeredPane2.add(itemPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 390, 310, 280));

        javax.swing.GroupLayout characterSheetLayout = new javax.swing.GroupLayout(characterSheet);
        characterSheet.setLayout(characterSheetLayout);
        characterSheetLayout.setHorizontalGroup(
            characterSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane2)
        );
        characterSheetLayout.setVerticalGroup(
            characterSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane2)
        );

        jLayeredPane1.add(characterSheet, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 0, 320, 720));

        heroXpBarLabel.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        heroXpBarLabel.setForeground(new java.awt.Color(255, 255, 255));
        heroXpBarLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        heroXpBarLabel.setText(arena3.Arena.CUR_PLAYER.getXp()+"/"+arena3.Arena.CUR_PLAYER.getTnl()
        );
        heroXpBarLabel.setAlignmentX(0.5F);
        jLayeredPane1.add(heroXpBarLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 690, 130, -1));

        heroMpBarLabel.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        heroMpBarLabel.setForeground(new java.awt.Color(255, 255, 255));
        heroMpBarLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        heroMpBarLabel.setText(arena3.Arena.CUR_PLAYER.getCurMp()+"/"+arena3.Arena.CUR_PLAYER.getMaxMp());
        heroMpBarLabel.setAlignmentX(0.5F);
        jLayeredPane1.add(heroMpBarLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 670, 130, -1));

        heroHpBarLabel.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        heroHpBarLabel.setForeground(new java.awt.Color(255, 255, 255));
        heroHpBarLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        heroHpBarLabel.setText(arena3.Arena.CUR_PLAYER.getCurHp()+"/"+arena3.Arena.CUR_PLAYER.getMaxHp());
        heroHpBarLabel.setAlignmentX(0.5F);
        heroHpBarLabel.setDoubleBuffered(true);
        heroHpBarLabel.setFocusable(false);
        jLayeredPane1.add(heroHpBarLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 650, 130, -1));

        heroXpBar.setBackground(new java.awt.Color(253, 122, 7));
        heroXpBar.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        heroXpBar.setForeground(new java.awt.Color(0, 0, 0));
        heroXpBar.setMaximum(arena3.Arena.CUR_PLAYER.getTnl());
        heroXpBar.setToolTipText("");
        heroXpBar.setValue(arena3.Arena.CUR_PLAYER.getTnl()-arena3.Arena.CUR_PLAYER.getXp()
        );
        heroXpBar.setAlignmentX(1.0F);
        heroXpBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        heroXpBar.setFocusable(false);
        heroXpBar.setOpaque(true);
        heroXpBar.setString("75/100");
        heroXpBar.setVerifyInputWhenFocusTarget(false);
        jLayeredPane1.add(heroXpBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 690, 310, 20));

        heroMpBar.setBackground(new java.awt.Color(75, 27, 240));
        heroMpBar.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        heroMpBar.setForeground(new java.awt.Color(0, 0, 0));
        heroMpBar.setMaximum(arena3.Arena.CUR_PLAYER.getMaxMp());
        heroMpBar.setToolTipText("");
        heroMpBar.setValue(arena3.Arena.CUR_PLAYER.getMaxMp()-arena3.Arena.CUR_PLAYER.getCurMp());
        heroMpBar.setAlignmentX(1.0F);
        heroMpBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        heroMpBar.setFocusable(false);
        heroMpBar.setOpaque(true);
        heroMpBar.setString("75/100");
        heroMpBar.setVerifyInputWhenFocusTarget(false);
        jLayeredPane1.add(heroMpBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 670, 310, 20));

        heroHpBar.setBackground(new java.awt.Color(206, 29, 29));
        heroHpBar.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        heroHpBar.setForeground(new java.awt.Color(0, 0, 0));
        heroHpBar.setMaximum(arena3.Arena.CUR_PLAYER.getMaxHp());
        heroHpBar.setToolTipText("");
        heroHpBar.setValue(arena3.Arena.CUR_PLAYER.getMaxHp()-arena3.Arena.CUR_PLAYER.getCurHp());
        heroHpBar.setAlignmentX(1.0F);
        heroHpBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        heroHpBar.setFocusable(false);
        heroHpBar.setOpaque(true);
        heroHpBar.setString("75/100");
        heroHpBar.setVerifyInputWhenFocusTarget(false);
        jLayeredPane1.add(heroHpBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 650, 310, 20));

        BackGround.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Village.PNG"))); // NOI18N
        jLayeredPane1.add(BackGround, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1270, 720));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
    /**
     * Takes player to the inn frame when the inn button is clicked
     * @param evt clicking the Inn button
     */
    private void InnButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InnButton2ActionPerformed
       
        try {
            audioPlayerOne.stop();
        }
        catch (UnsupportedAudioFileException | IOException | 
                LineUnavailableException ex) {
            System.out.println("Error 112");
        }
        audioPlayer.playOnce(2);
        InnFrame innFrame = new InnFrame();
        innFrame.setVisible(true);
        dispose();
    }//GEN-LAST:event_InnButton2ActionPerformed

    /**
    * Return to the start menu by clicking the exit button
    * @param evt clicking the exit button
    */
    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
 
        audioPlayer.playOnce(1);
        try {
            audioPlayerOne.stop();
        }
        catch (UnsupportedAudioFileException | IOException | 
                LineUnavailableException ex) {
            System.out.println("Error 113");
        }
        StartFrame startFrame = new StartFrame();
        startFrame.setVisible(true);
        dispose();
    }//GEN-LAST:event_ExitButtonActionPerformed
    
    /**
     * Takes player to the Arena exterior frame when the Arena Exterior frame is
     * clicked
     * @param evt clicking the ArenaExterior button
     */
    private void ArenaExteriorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArenaExteriorButtonActionPerformed
        
        try {
            audioPlayerOne.stop();
        }
        catch (UnsupportedAudioFileException | IOException | 
                LineUnavailableException ex) {
            System.out.println("Error 114");}
        audioPlayer.playOnce(2);
        ArenaExtFrame arenaExtFrame = new ArenaExtFrame();
        arenaExtFrame.setVisible(true);
        dispose();
    }//GEN-LAST:event_ArenaExteriorButtonActionPerformed
   
    /**
     * Takes player to the store frame when the store button is clicked
     * @param evt clicking the store button
     */
    private void StoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StoreButtonActionPerformed

        try {
            audioPlayerOne.stop();
        }
        catch (UnsupportedAudioFileException | IOException | 
                LineUnavailableException ex) {
            System.out.println("Error 115");
        }
        audioPlayer.playOnce(2);
        ShopFrame shopFrame = new ShopFrame();
        shopFrame.setVisible(true);
        dispose();
    }//GEN-LAST:event_StoreButtonActionPerformed
    
    /**
     * Perform the appropriate ability when clicking on the ability list
     * @param evt clicking on the ability list
     */
    private void abilityListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_abilityListMouseClicked

        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>(){

            @Override
            protected Void doInBackground() throws Exception {
                //gets the selected ability
                if(abilityList.getModel().getSize() > 0){            
                    int selection = abilityList.getSelectedIndex();
                    ListModel<String> listModel = abilityList.getModel();
                    String selectedAbilityInfo = listModel.
                            getElementAt(selection);
                    String[] selectedAbilityName = selectedAbilityInfo.
                            split(":");
                    String trimmedSelectedAbilityName = selectedAbilityName[0].
                            trim();
                    if(!(Arena.CUR_PLAYER.yaDumz((int)(Arena.CUR_PLAYER.
                            getAbilites().get(trimmedSelectedAbilityName).
                            getCost()*Arena.CUR_PLAYER.getMaxMp())))){  
                        Map<String, Integer> ability = Arena.CUR_PLAYER.
                                getAbilites().
                                get(trimmedSelectedAbilityName).
                                use(Arena.CUR_PLAYER);
                        updateForm();
                        if(ability != null){
                              audioPlayer.playEffect(Arena.CUR_PLAYER.
                                      getAbilites().
                                      get(trimmedSelectedAbilityName).
                                      getSoundFiles());
                        }
                        else{                          
                            audioPlayer.playOnce(16);
                        }
                    }
                    else{
                        audioPlayer.playOnce(16);
                    }
                }
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_abilityListMouseClicked

    private void swordImageLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_swordImageLabelMouseEntered

    }//GEN-LAST:event_swordImageLabelMouseEntered

    private void swordImageLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_swordImageLabelMouseExited

    }//GEN-LAST:event_swordImageLabelMouseExited

    private void staffImageLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_staffImageLabelMouseEntered

    }//GEN-LAST:event_staffImageLabelMouseEntered

    private void staffImageLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_staffImageLabelMouseExited

    }//GEN-LAST:event_staffImageLabelMouseExited

    private void bowImageLabel2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bowImageLabel2MouseEntered

    }//GEN-LAST:event_bowImageLabel2MouseEntered

    private void bowImageLabel2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bowImageLabel2MouseExited

    }//GEN-LAST:event_bowImageLabel2MouseExited

    /**
     * Uses a health potion when clicking on the health potion button
     * @param evt clicking the health potion button
     */
    private void healthPotionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_healthPotionButtonActionPerformed

        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>(){

            @Override
            protected Void doInBackground() throws Exception {
                if(Arena.CUR_PLAYER.getItems().get(Items.HEALTH.getName()).
                        getQuantity()>0){
                    audioPlayer.playEffect(Arena.CUR_PLAYER.getItems().
                            get(Items.HEALTH.getName()).getSoundFiles()); 
                    Arena.CUR_PLAYER.getItems().get(Items.HEALTH.getName()).
                            use(Arena.CUR_PLAYER);
                    updateForm();
                }
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_healthPotionButtonActionPerformed

    private void healthPotionLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_healthPotionLabelMouseEntered

    }//GEN-LAST:event_healthPotionLabelMouseEntered

    private void healthPotionLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_healthPotionLabelMouseExited

    }//GEN-LAST:event_healthPotionLabelMouseExited
   
    /**
     * Uses a ability potion when clicking on the health potion button
     * @param evt clicking the ability potion button
     */
    private void abilityPotionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abilityPotionButtonActionPerformed

        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>(){

            @Override
            protected Void doInBackground() throws Exception {
                if(Arena.CUR_PLAYER.getItems().get(Items.ABILITY.getName()).
                        getQuantity()>0){
                    audioPlayer.playEffect(Arena.CUR_PLAYER.getItems().
                            get(Items.ABILITY.getName()).getSoundFiles());         
                    Arena.CUR_PLAYER.getItems().get(Items.ABILITY.getName()).
                            use(Arena.CUR_PLAYER);
                    updateForm();
                }
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_abilityPotionButtonActionPerformed

    /**
    * Uses a combo potion when clicking on the combo potion button
    * @param evt clicking the combo potion button
    */
    private void comboPotionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPotionButtonActionPerformed

        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>(){

            @Override
            protected Void doInBackground() throws Exception {
                if(Arena.CUR_PLAYER.getItems().get(Items.COMBO.getName()).
                        getQuantity()>0){
                    audioPlayer.playEffect(Arena.CUR_PLAYER.getItems().
                            get(Items.COMBO.getName()).getSoundFiles());
                    Arena.CUR_PLAYER.getItems().get(Items.COMBO.getName()).
                            use(Arena.CUR_PLAYER);
                    updateForm();
                }
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_comboPotionButtonActionPerformed

    private void comboPotionLabelAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_comboPotionLabelAncestorAdded

    }//GEN-LAST:event_comboPotionLabelAncestorAdded

    /**
     * Takes player to the training frame when the trainers button is clicked
     * @param evt clicking the training button
     */
    private void trainingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainingButtonActionPerformed

        try {
            audioPlayerOne.stop();
        }
        catch (UnsupportedAudioFileException | IOException | 
                LineUnavailableException ex) {
            System.out.println("Error 116");
        }
        audioPlayer.playOnce(2);
        TrainingFrame tgFrame = new TrainingFrame();
        tgFrame.setVisible(true);
        dispose();
    }//GEN-LAST:event_trainingButtonActionPerformed

    /**
     * Main Method
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TravelFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TravelFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TravelFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TravelFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TravelFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ArenaExteriorButton;
    private javax.swing.JLabel BackGround;
    private javax.swing.JButton ExitButton;
    private javax.swing.JButton InnButton2;
    private javax.swing.JButton StoreButton;
    private javax.swing.JList<String> abilityList;
    private javax.swing.JPanel abilityPanel;
    private javax.swing.JButton abilityPotionButton;
    private javax.swing.JLabel abilityPotionLabel;
    private javax.swing.JLabel abilityQuantityLabel;
    private javax.swing.JScrollPane abilityScrollPane;
    private javax.swing.JLabel bowImageLabel2;
    private javax.swing.JPanel characterSheet;
    private javax.swing.JButton comboPotionButton;
    private javax.swing.JLabel comboPotionLabel;
    private javax.swing.JLabel comboQuantityLabel;
    private javax.swing.JPanel eqipmentPanel;
    private javax.swing.JLabel expLabel;
    private javax.swing.JLabel goldAmountLabel;
    private javax.swing.JLabel goldLabel;
    private javax.swing.JButton healthPotionButton;
    private javax.swing.JLabel healthPotionLabel;
    private javax.swing.JLabel heroDexLabel;
    private javax.swing.JProgressBar heroHpBar;
    private javax.swing.JLabel heroHpBarLabel;
    private javax.swing.JLabel heroIntLabel;
    private javax.swing.JProgressBar heroMpBar;
    private javax.swing.JLabel heroMpBarLabel;
    private javax.swing.JLabel heroStrLabel;
    private javax.swing.JProgressBar heroXpBar;
    private javax.swing.JLabel heroXpBarLabel;
    private javax.swing.JPanel itemPanel3;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JLabel levelLabel;
    private javax.swing.JLabel potionQuantityLabel;
    private javax.swing.JLabel roleLabel;
    private javax.swing.JLabel staffImageLabel;
    private javax.swing.JLabel swordImageLabel;
    private javax.swing.JButton trainingButton;
    private javax.swing.JLabel wagerAmountLabel;
    private javax.swing.JLabel wagerLabel;
    private javax.swing.JLabel xpCreditsLabel;
    // End of variables declaration//GEN-END:variables

    /**
    * Update the frame with the current player's information
    */  
    public void updateForm(){
                                   
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>(){
            
            @Override
            protected Void doInBackground() throws Exception { 
                Arena.CUR_PLAYER.roleAdjust();
                setAbilityList();
                roleLabel.setText(Arena.CUR_PLAYER.getRole());
                levelLabel.setText("LEVEL: "+Arena.CUR_PLAYER.getLevel());
                heroHpBarLabel.setText(Arena.CUR_PLAYER.getCurHp()+"/"
                        +Arena.CUR_PLAYER.getMaxHp());
                heroMpBarLabel.setText(Arena.CUR_PLAYER.getCurMp()+"/"
                        +Arena.CUR_PLAYER.getMaxMp());
                heroXpBarLabel.setText(Arena.CUR_PLAYER.getXp()+"/"
                        +Arena.CUR_PLAYER.getTnl());
                heroHpBar.setMaximum(Arena.CUR_PLAYER.getMaxHp());
                heroHpBar.setValue(Arena.CUR_PLAYER.getMaxHp()- 
                        Arena.CUR_PLAYER.getCurHp());
                heroMpBar.setMaximum(Arena.CUR_PLAYER.getMaxMp());
                heroMpBar.setValue(Arena.CUR_PLAYER.getMaxMp()- 
                        Arena.CUR_PLAYER.getCurMp());
                heroXpBar.setMaximum(Arena.CUR_PLAYER.getTnl());
                heroXpBar.setValue(Arena.CUR_PLAYER.getTnl() - 
                        Arena.CUR_PLAYER.getXp());
                heroStrLabel.setText("STR: "+Arena.CUR_PLAYER.getStr());
                heroIntLabel.setText("INT: "+Arena.CUR_PLAYER.getMag());
                heroDexLabel.setText("DEX: "+Arena.CUR_PLAYER.getDex());
                potionQuantityLabel.setText(Arena.CUR_PLAYER.getItems().
                        get(Items.HEALTH.getName()).getQuantity()+"");
                abilityQuantityLabel.setText(Arena.CUR_PLAYER.getItems().
                        get(Items.ABILITY.getName()).getQuantity()+"");
                comboQuantityLabel.setText(Arena.CUR_PLAYER.getItems().
                        get(Items.COMBO.getName()).getQuantity()+"");
                xpCreditsLabel.setText(Arena.CUR_PLAYER.getXpCredits()+"");
                goldAmountLabel.setText(Arena.CUR_PLAYER.getGold()+"");
                wagerAmountLabel.setText(Arena.CUR_PLAYER.getGoldWagered()+"");
                wagerLabel.setToolTipText("Rounds Wagared: "+Arena.CUR_PLAYER
                        .getRoundsWagered()+"");
                return null;
            }
        };
    worker.execute();
    }
  
    /**
     * Set the ability list component to the current player's abilities
     */
    public void setAbilityList(){
        Vector<String> abilities = new Vector<>();
        if(Arena.CUR_PLAYER.getRole().equals(Roles.PHYSICAL.getRole())){
            for(Map.Entry<String,Ability> entrySet: Arena.CUR_PLAYER.
                    getAbilites().entrySet()){
                if(entrySet.getValue().getType().equals("Physical")){
                    abilities.add(entrySet.getKey()+":        (AP  "+(int)
                            (Arena.CUR_PLAYER.getMaxMp()*entrySet.getValue()
                                    .getCost())+")");
                }    
            }    
        }
        else if(Arena.CUR_PLAYER.getRole().equals(Roles.MAGICAL.getRole())){
            for(Map.Entry<String,Ability> entrySet: Arena.CUR_PLAYER.
                    getAbilites().entrySet()){
                if(entrySet.getValue().getType().equals("Magical")){
                    abilities.add(entrySet.getKey()+":        (AP  "+(int)
                            (Arena.CUR_PLAYER.getMaxMp()*entrySet.getValue()
                                    .getCost())+")");
                }    
            } 
        }
        else if(Arena.CUR_PLAYER.getRole().equals(Roles.RANGED.getRole())){
            for(Map.Entry<String,Ability> entrySet: Arena.CUR_PLAYER.
                    getAbilites().entrySet()){
                if(entrySet.getValue().getType().equals("Ranged")){
                    abilities.add(entrySet.getKey()+":        (AP  "+(int)
                            (Arena.CUR_PLAYER.getMaxMp()*entrySet.getValue()
                                    .getCost())+")");
                }    
            } 
        }
        else{
            for(Map.Entry<String,Ability> entrySet: Arena.CUR_PLAYER.
                    getAbilites().entrySet()){
                if(entrySet.getValue().getType().equals("Balanced")){
                    abilities.add(entrySet.getKey()+":        (AP  "+(int)
                            (Arena.CUR_PLAYER.getMaxMp()*entrySet.getValue()
                                    .getCost())+")");
                }    
            } 
        }
        abilityList.setListData(abilities);
    }
}
