/*
 * This GUI allows the player to purchase new weapons
 */
package frames;

import abilities.Ability;
import arena3.Arena;
import collections.Items;
import collections.Roles;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.io.IOException;
import java.util.Map;
import java.util.Vector;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.JLabel;
import javax.swing.ListModel;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import utilities.AudioPlayer;
import utilities.FrameManipulator;
import weapon.Weapon;

/**
 * @author Scott Underwood
 * @author Shawn Ferdig
 */
public class ShopFrame extends javax.swing.JFrame {
    FrameManipulator g = new FrameManipulator();
    AudioPlayer audioPlayer;
    AudioPlayer audioPlayerOne;
    DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
    DefaultTableModel defaultModel;        
    
    /**
     * Creates new form ShopFrame
     */
    public ShopFrame() {
        
        initComponents();
        defaultModel = (DefaultTableModel)inventoryTable.getModel();
        inventoryTable.setShowVerticalLines(false);
        inventoryTable.getTableHeader().setFont(new Font("Bell MT", 
                Font.BOLD, 18));
        inventoryTable.getTableHeader().setOpaque(true);
        inventoryTable.getTableHeader().setBackground(new Color(0,0,0));
        inventoryTable.getTableHeader().setForeground(Color.white);
        buyButton.setEnabled(false);
        for(int x=0;x<inventoryTable.getColumnCount();x++){
            inventoryTable.getColumnModel().getColumn(x)
                    .setCellRenderer( centerRenderer );
        }
        this.SmithPanel.setVisible(false);
        try {
            audioPlayer = new AudioPlayer();
            audioPlayerOne = new AudioPlayer();
        }

        catch (UnsupportedAudioFileException | IOException | 
                LineUnavailableException ex) {
            System.out.println("Error 107");
        }
        audioPlayerOne.setTrack(17);
        audioPlayerOne.play();
        g.centeredFrame(this);
        int i = 0;
        Arena.BLK_SMITH.setInventory(Arena.CUR_PLAYER.getLevel());
        for(Weapon weapon : Arena.BLK_SMITH.getInventory()){

            inventoryTable.setValueAt(weapon.getType(), i, 0);
            inventoryTable.setValueAt(weapon.getName(), i, 1);
            inventoryTable.setValueAt(weapon.getStr(), i, 2);
            inventoryTable.setValueAt(weapon.getMag(), i, 3);
            inventoryTable.setValueAt(weapon.getDex(), i, 4);
            inventoryTable.setValueAt(weapon.getCost(), i, 5);
            i++;
        }
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        inventoryTable.getColumnModel().getColumn(1).setPreferredWidth(225);
        inventoryTable.getColumnModel().getColumn(2).setPreferredWidth(30);
        inventoryTable.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        inventoryTable.getColumnModel().getColumn(3).setPreferredWidth(30);
        inventoryTable.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        inventoryTable.getColumnModel().getColumn(4).setPreferredWidth(30);
        inventoryTable.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
        inventoryTable.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
        inventoryTable.getTableHeader().setReorderingAllowed(false);
        inventoryTable.getTableHeader().setResizingAllowed(false);
        updateForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane2 = new javax.swing.JLayeredPane();
        barterButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        characterSheet = new javax.swing.JPanel();
        jLayeredPane5 = new javax.swing.JLayeredPane();
        xpCreditsLabel = new javax.swing.JLabel();
        expLabel = new javax.swing.JLabel();
        goldAmountLabel = new javax.swing.JLabel();
        goldLabel = new javax.swing.JLabel();
        heroDexLabel = new javax.swing.JLabel();
        heroIntLabel = new javax.swing.JLabel();
        heroStrLabel = new javax.swing.JLabel();
        levelLabel = new javax.swing.JLabel();
        roleLabel = new javax.swing.JLabel();
        abilityPanel = new javax.swing.JPanel();
        abilityScrollPane = new javax.swing.JScrollPane();
        abilityList = new javax.swing.JList<>();
        eqipmentPanel = new javax.swing.JPanel();
        swordImageLabel = new javax.swing.JLabel();
        bowImageLabel = new javax.swing.JLabel();
        stonesImageLabel = new javax.swing.JLabel();
        itemPanel3 = new javax.swing.JPanel();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        potionQuantityLabel = new javax.swing.JLabel();
        healthPotionButton = new javax.swing.JButton();
        healthPotionLabel = new javax.swing.JLabel();
        abilityQuantityLabel = new javax.swing.JLabel();
        abilityPotionButton = new javax.swing.JButton();
        comboQuantityLabel = new javax.swing.JLabel();
        comboPotionButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        abilityPotionLabel = new javax.swing.JLabel();
        comboPotionLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        wagerAmountLabel = new javax.swing.JLabel();
        wagerLabel = new javax.swing.JLabel();
        heroXpBarLabel = new javax.swing.JLabel();
        heroMpBarLabel = new javax.swing.JLabel();
        heroHpBarLabel = new javax.swing.JLabel();
        heroXpBar = new javax.swing.JProgressBar();
        heroMpBar = new javax.swing.JProgressBar();
        heroHpBar = new javax.swing.JProgressBar();
        SmithPanel = new javax.swing.JPanel();
        jLayeredPane7 = new javax.swing.JLayeredPane();
        walk = new javax.swing.JButton();
        buyButton = new javax.swing.JButton();
        inventoryScrollPane = new javax.swing.JScrollPane();
        inventoryTable = new javax.swing.JTable();
        smithLabel = new javax.swing.JLabel();
        smithBackground = new javax.swing.JLabel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLayeredPane2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        barterButton.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        barterButton.setForeground(new java.awt.Color(51, 0, 0));
        barterButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/agedMetal.jpg"))); // NOI18N
        barterButton.setText("BARTER");
        barterButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        barterButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        barterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barterButtonActionPerformed(evt);
            }
        });
        jLayeredPane2.add(barterButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 570, 160, 60));

        exitButton.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        exitButton.setForeground(new java.awt.Color(51, 0, 0));
        exitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/agedMetal.jpg"))); // NOI18N
        exitButton.setText("EXIT");
        exitButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        exitButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        jLayeredPane2.add(exitButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 640, 160, 60));

        characterSheet.setBackground(new java.awt.Color(0, 0, 0));
        characterSheet.setBorder(javax.swing.BorderFactory.createTitledBorder(null, arena3.Arena.CUR_PLAYER.getName(), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Century Gothic", 1, 24), new java.awt.Color(255, 255, 204))); // NOI18N
        characterSheet.setForeground(new java.awt.Color(255, 255, 204));

        jLayeredPane5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        xpCreditsLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        xpCreditsLabel.setForeground(new java.awt.Color(255, 255, 255));
        xpCreditsLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        xpCreditsLabel.setText(Integer.toString(arena3.Arena.CUR_PLAYER.getXpCredits()));
        jLayeredPane5.add(xpCreditsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 100, 40));

        expLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        expLabel.setForeground(new java.awt.Color(255, 255, 255));
        expLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        expLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/smallHourGlass-removebg-preview.png"))); // NOI18N
        expLabel.setToolTipText("XP Tokens");
        jLayeredPane5.add(expLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, 50, 40));

        goldAmountLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        goldAmountLabel.setForeground(new java.awt.Color(255, 255, 255));
        goldAmountLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        goldAmountLabel.setText(Integer.toString(arena3.Arena.CUR_PLAYER.getGold()));
        jLayeredPane5.add(goldAmountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, 100, 40));

        goldLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        goldLabel.setForeground(new java.awt.Color(255, 255, 255));
        goldLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        goldLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stacked-coin-14-removebg.png"))); // NOI18N
        goldLabel.setToolTipText("Gold");
        jLayeredPane5.add(goldLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 80, 80, 40));

        heroDexLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        heroDexLabel.setForeground(new java.awt.Color(51, 153, 0));
        heroDexLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        heroDexLabel.setText("DEX: "+Integer.toString(arena3.Arena.CUR_PLAYER.getDex()));
        jLayeredPane5.add(heroDexLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 40, 90, 40));

        heroIntLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        heroIntLabel.setForeground(new java.awt.Color(0, 51, 204));
        heroIntLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        heroIntLabel.setText("INT: "+Integer.toString(arena3.Arena.CUR_PLAYER.getMag()));
        jLayeredPane5.add(heroIntLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 40, 90, 40));

        heroStrLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        heroStrLabel.setForeground(new java.awt.Color(255, 0, 51));
        heroStrLabel.setText("STR: "+Integer.toString(arena3.Arena.CUR_PLAYER.getStr()));
        jLayeredPane5.add(heroStrLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 90, 40));

        levelLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        levelLabel.setForeground(new java.awt.Color(255, 255, 255));
        levelLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        levelLabel.setText("LEVEL: "+Integer.toString(arena3.Arena.CUR_PLAYER.getLevel()));
        jLayeredPane5.add(levelLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 160, 40));

        roleLabel.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        roleLabel.setForeground(new java.awt.Color(255, 255, 255));
        roleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        roleLabel.setText(arena3.Arena.CUR_PLAYER.getRole());
        jLayeredPane5.add(roleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 130, 40));

        abilityPanel.setBackground(new java.awt.Color(0, 0, 0));
        abilityPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ABILITIES", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 1, 14), new java.awt.Color(255, 255, 204))); // NOI18N
        abilityPanel.setForeground(new java.awt.Color(255, 255, 255));

        abilityList.setBackground(new java.awt.Color(0, 0, 0));
        abilityList.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        abilityList.setForeground(new java.awt.Color(255, 255, 255));
        abilityList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Cure", "Barrier", "Magic Missle", "Slow", "Pinning Shot", "Kill Bill", "FIre Ball", "Cover" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        abilityList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        abilityList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                abilityListMouseClicked(evt);
            }
        });
        abilityScrollPane.setViewportView(abilityList);

        javax.swing.GroupLayout abilityPanelLayout = new javax.swing.GroupLayout(abilityPanel);
        abilityPanel.setLayout(abilityPanelLayout);
        abilityPanelLayout.setHorizontalGroup(
            abilityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(abilityScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
        );
        abilityPanelLayout.setVerticalGroup(
            abilityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(abilityScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
        );

        jLayeredPane5.add(abilityPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 130, 310, 160));

        eqipmentPanel.setBackground(new java.awt.Color(0, 0, 0));
        eqipmentPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "EQUIPMENT", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 1, 14), new java.awt.Color(255, 255, 204))); // NOI18N

        swordImageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        swordImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/notSoTinySword.png"))); // NOI18N
        swordImageLabel.setToolTipText(Arena.CUR_PLAYER.getEquip().get("PHYSICAL").getName().toUpperCase()+"     Str:"+Arena.CUR_PLAYER.getEquip().get("PHYSICAL").getStr()+" Mag:"+arena3.Arena.CUR_PLAYER.getEquip().get("PHYSICAL").getMag()+" Dex:"+arena3.Arena.CUR_PLAYER.getEquip().get("PHYSICAL").getDex()
        );
        swordImageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                swordImageLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                swordImageLabelMouseExited(evt);
            }
        });

        bowImageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bowImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bowSecondGo-removebg.png"))); // NOI18N
        bowImageLabel.setToolTipText(Arena.CUR_PLAYER.getEquip().get("RANGED").getName().toUpperCase()+"     Str:"+arena3.Arena.CUR_PLAYER.getEquip().get("RANGED").getStr()+" Mag:"+arena3.Arena.CUR_PLAYER.getEquip().get("RANGED").getMag()+" Dex:"+arena3.Arena.CUR_PLAYER.getEquip().get("RANGED").getDex());
        bowImageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bowImageLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bowImageLabelMouseExited(evt);
            }
        });

        stonesImageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        stonesImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/GemsfirstSecondgo.png"))); // NOI18N
        stonesImageLabel.setToolTipText(Arena.CUR_PLAYER.getEquip().get("MAGICAL").getName().toUpperCase()+"     Str:"+arena3.Arena.CUR_PLAYER.getEquip().get("MAGICAL").getStr()+" Mag:"+arena3.Arena.CUR_PLAYER.getEquip().get("MAGICAL").getMag()+" Dex:"+arena3.Arena.CUR_PLAYER.getEquip().get("MAGICAL").getDex());
        stonesImageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                stonesImageLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                stonesImageLabelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout eqipmentPanelLayout = new javax.swing.GroupLayout(eqipmentPanel);
        eqipmentPanel.setLayout(eqipmentPanelLayout);
        eqipmentPanelLayout.setHorizontalGroup(
            eqipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eqipmentPanelLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(swordImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stonesImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bowImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        eqipmentPanelLayout.setVerticalGroup(
            eqipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eqipmentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(eqipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(swordImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bowImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stonesImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLayeredPane5.add(eqipmentPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 290, 310, 90));

        itemPanel3.setBackground(new java.awt.Color(0, 0, 0));
        itemPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ITEMS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 1, 14), new java.awt.Color(255, 255, 204))); // NOI18N

        jLayeredPane3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        potionQuantityLabel.setForeground(new java.awt.Color(255, 255, 255));
        potionQuantityLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        potionQuantityLabel.setText(arena3.Arena.CUR_PLAYER.getItems().get(Items.ABILITY.getName()).getQuantity()+"");
        potionQuantityLabel.setToolTipText("");
        jLayeredPane3.add(potionQuantityLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 30, 20));

        healthPotionButton.setBackground(new java.awt.Color(0, 0, 0));
        healthPotionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/healthPotionsm.png"))); // NOI18N
        healthPotionButton.setToolTipText("Restores "+arena3.Arena.CUR_PLAYER.getItems().get(Items.HEALTH.getName()).getHp()*100+"% of total HP"
        );
        healthPotionButton.setContentAreaFilled(false);
        healthPotionButton.setMaximumSize(new java.awt.Dimension(82, 82));
        healthPotionButton.setMinimumSize(new java.awt.Dimension(82, 82));
        healthPotionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                healthPotionButtonActionPerformed(evt);
            }
        });
        jLayeredPane3.add(healthPotionButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 80, 80));

        healthPotionLabel.setToolTipText("Potion: <<Heals 10% of Max HP>>");
        healthPotionLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        healthPotionLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                healthPotionLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                healthPotionLabelMouseExited(evt);
            }
        });
        jLayeredPane3.add(healthPotionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 80, 80));

        abilityQuantityLabel.setForeground(new java.awt.Color(255, 255, 255));
        abilityQuantityLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        abilityQuantityLabel.setText(arena3.Arena.CUR_PLAYER.getItems().get(Items.HEALTH.getName()).getQuantity()+"");
        abilityQuantityLabel.setToolTipText("");
        jLayeredPane3.add(abilityQuantityLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 0, 30, 20));

        abilityPotionButton.setBackground(new java.awt.Color(0, 0, 0));
        abilityPotionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/abilityPotion-removebg-.png"))); // NOI18N
        abilityPotionButton.setToolTipText("Restores "+arena3.Arena.CUR_PLAYER.getItems().get(Items.ABILITY.getName()).getMp()*100+"% of total MP"
        );
        abilityPotionButton.setContentAreaFilled(false);
        abilityPotionButton.setMaximumSize(new java.awt.Dimension(82, 82));
        abilityPotionButton.setMinimumSize(new java.awt.Dimension(82, 82));
        abilityPotionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abilityPotionButtonActionPerformed(evt);
            }
        });
        jLayeredPane3.add(abilityPotionButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 0, 80, 80));

        comboQuantityLabel.setForeground(new java.awt.Color(255, 255, 255));
        comboQuantityLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        comboQuantityLabel.setText(arena3.Arena.CUR_PLAYER.getItems().get(Items.COMBO.getName()).getQuantity()+"");
        comboQuantityLabel.setToolTipText("");
        comboQuantityLabel.setRequestFocusEnabled(false);
        comboQuantityLabel.setVerifyInputWhenFocusTarget(false);
        jLayeredPane3.add(comboQuantityLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 30, 20));

        comboPotionButton.setBackground(new java.awt.Color(0, 0, 0));
        comboPotionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ComboPotion.png"))); // NOI18N
        comboPotionButton.setToolTipText("Restores "+arena3.Arena.CUR_PLAYER.getItems().get(Items.COMBO.getName()).getHp()*100+"% of total HP and "+arena3.Arena.CUR_PLAYER.getItems().get(Items.COMBO.getName()).getMp()*100+"% of total AP"
        );
        comboPotionButton.setContentAreaFilled(false);
        comboPotionButton.setMaximumSize(new java.awt.Dimension(82, 82));
        comboPotionButton.setMinimumSize(new java.awt.Dimension(82, 82));
        comboPotionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPotionButtonActionPerformed(evt);
            }
        });
        jLayeredPane3.add(comboPotionButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 80, 80));

        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jLayeredPane3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 80, 80));

        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jLayeredPane3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, 80, 80));

        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jLayeredPane3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 80, 80));

        abilityPotionLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jLayeredPane3.add(abilityPotionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 0, 80, 80));

        comboPotionLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        comboPotionLabel.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                comboPotionLabelAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jLayeredPane3.add(comboPotionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 80, 80));

        jLabel8.setToolTipText("");
        jLayeredPane3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 160, 80, 80));

        jLabel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jLayeredPane3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 80, 80));

        jLabel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jLayeredPane3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 80, 80));

        wagerAmountLabel.setForeground(new java.awt.Color(255, 255, 255));
        wagerAmountLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        wagerAmountLabel.setText(Arena.CUR_PLAYER.getGoldWagered()+" G");
        wagerAmountLabel.setToolTipText("");
        jLayeredPane3.add(wagerAmountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 160, 70, 20));

        wagerLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/PokerChips.png"))); // NOI18N
        wagerLabel.setToolTipText("Rounds Wagered: "+Arena.CUR_PLAYER.getRoundsWagered()+"");
        jLayeredPane3.add(wagerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 160, 80, 80));

        javax.swing.GroupLayout itemPanel3Layout = new javax.swing.GroupLayout(itemPanel3);
        itemPanel3.setLayout(itemPanel3Layout);
        itemPanel3Layout.setHorizontalGroup(
            itemPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLayeredPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        itemPanel3Layout.setVerticalGroup(
            itemPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, itemPanel3Layout.createSequentialGroup()
                .addComponent(jLayeredPane3)
                .addContainerGap())
        );

        jLayeredPane5.add(itemPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 390, 310, 280));

        javax.swing.GroupLayout characterSheetLayout = new javax.swing.GroupLayout(characterSheet);
        characterSheet.setLayout(characterSheetLayout);
        characterSheetLayout.setHorizontalGroup(
            characterSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane5)
        );
        characterSheetLayout.setVerticalGroup(
            characterSheetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane5)
        );

        jLayeredPane2.add(characterSheet, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 0, 320, 720));

        heroXpBarLabel.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        heroXpBarLabel.setForeground(new java.awt.Color(255, 255, 255));
        heroXpBarLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        heroXpBarLabel.setText(arena3.Arena.CUR_PLAYER.getXp()+"/"+arena3.Arena.CUR_PLAYER.getTnl()
        );
        heroXpBarLabel.setAlignmentX(0.5F);
        jLayeredPane2.add(heroXpBarLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 690, 130, -1));

        heroMpBarLabel.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        heroMpBarLabel.setForeground(new java.awt.Color(255, 255, 255));
        heroMpBarLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        heroMpBarLabel.setText(arena3.Arena.CUR_PLAYER.getCurMp()+"/"+arena3.Arena.CUR_PLAYER.getMaxMp());
        heroMpBarLabel.setAlignmentX(0.5F);
        jLayeredPane2.add(heroMpBarLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 670, 130, -1));

        heroHpBarLabel.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        heroHpBarLabel.setForeground(new java.awt.Color(255, 255, 255));
        heroHpBarLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        heroHpBarLabel.setText(arena3.Arena.CUR_PLAYER.getCurHp()+"/"+arena3.Arena.CUR_PLAYER.getMaxHp());
        heroHpBarLabel.setAlignmentX(0.5F);
        heroHpBarLabel.setDoubleBuffered(true);
        heroHpBarLabel.setFocusable(false);
        jLayeredPane2.add(heroHpBarLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 650, 130, -1));

        heroXpBar.setBackground(new java.awt.Color(253, 122, 7));
        heroXpBar.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        heroXpBar.setForeground(new java.awt.Color(0, 0, 0));
        heroXpBar.setMaximum(arena3.Arena.CUR_PLAYER.getTnl());
        heroXpBar.setToolTipText("");
        heroXpBar.setValue(arena3.Arena.CUR_PLAYER.getTnl()-arena3.Arena.CUR_PLAYER.getXp()
        );
        heroXpBar.setAlignmentX(1.0F);
        heroXpBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        heroXpBar.setFocusable(false);
        heroXpBar.setOpaque(true);
        heroXpBar.setString("75/100");
        heroXpBar.setVerifyInputWhenFocusTarget(false);
        jLayeredPane2.add(heroXpBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 690, 310, 20));

        heroMpBar.setBackground(new java.awt.Color(75, 27, 240));
        heroMpBar.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        heroMpBar.setForeground(new java.awt.Color(0, 0, 0));
        heroMpBar.setMaximum(arena3.Arena.CUR_PLAYER.getMaxMp());
        heroMpBar.setToolTipText("");
        heroMpBar.setValue(arena3.Arena.CUR_PLAYER.getMaxMp()-arena3.Arena.CUR_PLAYER.getCurMp());
        heroMpBar.setAlignmentX(1.0F);
        heroMpBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        heroMpBar.setFocusable(false);
        heroMpBar.setOpaque(true);
        heroMpBar.setString("75/100");
        heroMpBar.setVerifyInputWhenFocusTarget(false);
        jLayeredPane2.add(heroMpBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 670, 310, 20));

        heroHpBar.setBackground(new java.awt.Color(206, 29, 29));
        heroHpBar.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        heroHpBar.setForeground(new java.awt.Color(0, 0, 0));
        heroHpBar.setMaximum(arena3.Arena.CUR_PLAYER.getMaxHp());
        heroHpBar.setToolTipText("");
        heroHpBar.setValue(arena3.Arena.CUR_PLAYER.getMaxHp()-arena3.Arena.CUR_PLAYER.getCurHp());
        heroHpBar.setAlignmentX(1.0F);
        heroHpBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        heroHpBar.setFocusable(false);
        heroHpBar.setOpaque(true);
        heroHpBar.setString("75/100");
        heroHpBar.setVerifyInputWhenFocusTarget(false);
        jLayeredPane2.add(heroHpBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 650, 310, 20));

        SmithPanel.setOpaque(false);
        SmithPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLayeredPane7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        walk.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        walk.setForeground(new java.awt.Color(51, 0, 0));
        walk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/agedMetal.jpg"))); // NOI18N
        walk.setText("WALK AWAY");
        walk.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        walk.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        walk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                walkActionPerformed(evt);
            }
        });
        jLayeredPane7.add(walk, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 380, 160, 60));

        buyButton.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        buyButton.setForeground(new java.awt.Color(51, 0, 0));
        buyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/agedMetal.jpg"))); // NOI18N
        buyButton.setText("BUY");
        buyButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        buyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });
        jLayeredPane7.add(buyButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 380, 160, 60));

        inventoryScrollPane.setBackground(new java.awt.Color(0, 0, 0));
        inventoryScrollPane.setBorder(null);
        inventoryScrollPane.setPreferredSize(new java.awt.Dimension(700, 330));
        inventoryScrollPane.setRequestFocusEnabled(false);
        inventoryScrollPane.setVerifyInputWhenFocusTarget(false);

        inventoryTable.setBackground(new java.awt.Color(0, 0, 0));
        inventoryTable.setBorder(null);
        inventoryTable.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        inventoryTable.setForeground(new java.awt.Color(255, 255, 255));
        inventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "", "", "", "", ""},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "TYPE", "NAME", "STR", "MAG", "DEX", "PRICE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        inventoryTable.setToolTipText("");
        inventoryTable.setAutoscrolls(false);
        inventoryTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        inventoryTable.setDoubleBuffered(true);
        inventoryTable.setGridColor(new java.awt.Color(153, 153, 153));
        inventoryTable.setRowHeight(25);
        inventoryTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        inventoryTable.setShowHorizontalLines(true);
        inventoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inventoryTableMouseClicked(evt);
            }
        });
        inventoryScrollPane.setViewportView(inventoryTable);

        jLayeredPane7.add(inventoryScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, -1, -1));

        smithLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Smith.png"))); // NOI18N
        jLayeredPane7.add(smithLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 30, 330, 370));

        smithBackground.setBackground(new java.awt.Color(34, 16, 12));
        smithBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/foundry.jpg"))); // NOI18N
        smithBackground.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 10, true));
        smithBackground.setOpaque(true);
        jLayeredPane7.add(smithBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 950, 460));

        SmithPanel.add(jLayeredPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 950, 470));

        jLayeredPane2.add(SmithPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 950, 470));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BlackSmith.PNG"))); // NOI18N
        jLayeredPane2.add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1270, 730));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane2)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Returns the player to the travelFrame
     * @param evt - on button click
     */
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        TravelFrame g = new TravelFrame ();
        g.setVisible(true);
        dispose();
    }//GEN-LAST:event_exitActionPerformed

    /**
     * Returns the player to the travelFrame
     * @param evt - one button click 
     */
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        try {
            audioPlayerOne.stop();
        } 
        catch (UnsupportedAudioFileException | IOException |
                LineUnavailableException ex) {
            System.out.println("Error 108");
        }
        TravelFrame g = new TravelFrame ();
        g.setVisible(true);
        dispose();
    }//GEN-LAST:event_exitButtonActionPerformed
   
    /**
     * Opens the smith's inventory and adjust to the appropriate size
     * @param evt on button click
     */
    private void barterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barterButtonActionPerformed
        
        int removeSize = (12 - Arena.BLK_SMITH.getInventory().size())*25;
        inventoryScrollPane.setPreferredSize(new Dimension(inventoryScrollPane.
                getPreferredSize().width, inventoryScrollPane.getPreferredSize()
                        .height-removeSize));
        audioPlayer.playOnce(2);
        defaultModel = (DefaultTableModel)inventoryTable.getModel();
        defaultModel.setRowCount(Arena.BLK_SMITH.getInventory().size());
        this.SmithPanel.setVisible(true);   
    }//GEN-LAST:event_barterButtonActionPerformed
    
    /**
     * Makes a selection from the smith's inventory and enables the buyButton
     * if conditions are met.
     * @param evt - on button click
     */
    private void inventoryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inventoryTableMouseClicked
       
        if(!(inventoryTable.getRowCount()==0)){
            buyButton.setEnabled(Arena.BLK_SMITH.canAfford(inventoryTable
                    .getSelectedRow()));
        }
    }//GEN-LAST:event_inventoryTableMouseClicked

    /**
     * Uses selected ability when clicking on the ability list, plays a negative
     * sound effective if the ability is not able to be used
     * @param evt - on button click 
     */
    private void abilityListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_abilityListMouseClicked

        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>(){

            @Override
            protected Void doInBackground() throws Exception {
                //gets the selected ability
                if(abilityList.getModel().getSize() > 0){
                    int selection = abilityList.getSelectedIndex();
                    ListModel<String> listModel = abilityList.getModel();
                    String selectedAbilityInfo = listModel.
                    getElementAt(selection);
                    String[] selectedAbilityName = selectedAbilityInfo.
                    split(":");
                    String trimmedSelectedAbilityName = selectedAbilityName[0].
                    trim();
                    if(!(Arena.CUR_PLAYER.yaDumz((int)(Arena.CUR_PLAYER.
                        getAbilites().get(trimmedSelectedAbilityName).
                        getCost()*Arena.CUR_PLAYER.getMaxMp())))){
                        Map<String, Integer> ability = Arena.CUR_PLAYER.
                        getAbilites().
                        get(trimmedSelectedAbilityName).
                        use(Arena.CUR_PLAYER);
                        updateForm();
                        if(ability != null){
                            audioPlayer.playEffect(Arena.CUR_PLAYER.
                                getAbilites().
                                get(trimmedSelectedAbilityName).
                                getSoundFiles());
                        }
                        else{
                            audioPlayer.playOnce(16);
                        }
                    }
                    else{
                        audioPlayer.playOnce(16);
                    }
                }
            return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_abilityListMouseClicked

    private void swordImageLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_swordImageLabelMouseEntered

    }//GEN-LAST:event_swordImageLabelMouseEntered

    private void swordImageLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_swordImageLabelMouseExited

    }//GEN-LAST:event_swordImageLabelMouseExited

    private void bowImageLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bowImageLabelMouseEntered

    }//GEN-LAST:event_bowImageLabelMouseEntered

    private void bowImageLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bowImageLabelMouseExited

    }//GEN-LAST:event_bowImageLabelMouseExited

    private void stonesImageLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stonesImageLabelMouseEntered

    }//GEN-LAST:event_stonesImageLabelMouseEntered

    private void stonesImageLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stonesImageLabelMouseExited

    }//GEN-LAST:event_stonesImageLabelMouseExited
    
    /**
     * Uses health potion if the player has any available 
     * @param evt - on button click  
     */
    private void healthPotionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_healthPotionButtonActionPerformed

        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>(){

            @Override
            protected Void doInBackground() throws Exception {
                if(Arena.CUR_PLAYER.getItems().get(Items.HEALTH.getName()).
                    getQuantity()>0){
                    audioPlayer.playEffect(Arena.CUR_PLAYER.getItems().
                        get(Items.HEALTH.getName()).getSoundFiles());
                    Arena.CUR_PLAYER.getItems().get(Items.HEALTH.getName()).
                    use(Arena.CUR_PLAYER);
                    updateForm();
                }
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_healthPotionButtonActionPerformed

    private void healthPotionLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_healthPotionLabelMouseEntered

    }//GEN-LAST:event_healthPotionLabelMouseEntered

    private void healthPotionLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_healthPotionLabelMouseExited

    }//GEN-LAST:event_healthPotionLabelMouseExited

    /**
     * Uses ability potion if the player has any available 
     * @param evt - on button click  
     */
    private void abilityPotionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abilityPotionButtonActionPerformed

        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>(){

            @Override
            protected Void doInBackground() throws Exception {
                if(Arena.CUR_PLAYER.getItems().get(Items.ABILITY.getName()).
                    getQuantity()>0){
                    audioPlayer.playEffect(Arena.CUR_PLAYER.getItems().
                        get(Items.ABILITY.getName()).getSoundFiles());
                    Arena.CUR_PLAYER.getItems().get(Items.ABILITY.getName()).
                    use(Arena.CUR_PLAYER);
                    updateForm();
                }
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_abilityPotionButtonActionPerformed

     /**
     * Uses Combo potion if the player has any available 
     * @param evt - on button click  
     */
    private void comboPotionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPotionButtonActionPerformed

        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>(){

            @Override
            protected Void doInBackground() throws Exception {
                if(Arena.CUR_PLAYER.getItems().get(Items.COMBO.getName()).
                    getQuantity()>0){
                    audioPlayer.playEffect(Arena.CUR_PLAYER.getItems().
                        get(Items.COMBO.getName()).getSoundFiles());
                    Arena.CUR_PLAYER.getItems().get(Items.COMBO.getName()).
                    use(Arena.CUR_PLAYER);
                    updateForm();
                }
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_comboPotionButtonActionPerformed

    private void comboPotionLabelAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_comboPotionLabelAncestorAdded

    }//GEN-LAST:event_comboPotionLabelAncestorAdded

    /**
     * Closes the smith's inventory screen
     * @param evt 
     */
    private void walkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_walkActionPerformed

        audioPlayer.setTrack(1);
        audioPlayer.playOnce();
        SmithPanel.setVisible(false);
    }//GEN-LAST:event_walkActionPerformed

    /**
     * Purchase selected equipment from the smith's inventory, adjust the
     * inventory window to reflect he equipment removed. 
     * @param evt - on button click
     */
    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
        
        Arena.BLK_SMITH.purchase(inventoryTable.getSelectedRow());
        String tradeInType = Arena.BLK_SMITH.getInventory().get(inventoryTable
                .getSelectedRow()).getType();
        int tradeInValue = Arena.CUR_PLAYER.getEquip().get(tradeInType).
                getValue();
        String newWeaponType = Arena.BLK_SMITH.getInventory().get(inventoryTable
                .getSelectedRow()).getType(); 
        Arena.CUR_PLAYER.getEquip().put(newWeaponType, Arena.BLK_SMITH
                .getInventory().get(inventoryTable.getSelectedRow()));
        Arena.CUR_PLAYER.setGold(Arena.CUR_PLAYER.getGold()-(Arena.BLK_SMITH
                .getInventory().get(inventoryTable.getSelectedRow())
                .getCost()-tradeInValue));
        Arena.BLK_SMITH.getInventory().remove(inventoryTable.getSelectedRow()); 
        defaultModel.removeRow(inventoryTable.getSelectedRow());
        inventoryScrollPane.setPreferredSize(new Dimension(inventoryScrollPane
                .getPreferredSize().width, inventoryScrollPane
                        .getPreferredSize().height-25));
        Arena.CUR_PLAYER.setAdditionalStats();
        audioPlayer.playOnce(30);
        this.buyButton.setEnabled(false);
        updateForm();
    }//GEN-LAST:event_buyButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShopFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShopFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShopFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShopFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShopFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel SmithPanel;
    private javax.swing.JList<String> abilityList;
    private javax.swing.JPanel abilityPanel;
    private javax.swing.JButton abilityPotionButton;
    private javax.swing.JLabel abilityPotionLabel;
    private javax.swing.JLabel abilityQuantityLabel;
    private javax.swing.JScrollPane abilityScrollPane;
    private javax.swing.JLabel background;
    private javax.swing.JButton barterButton;
    private javax.swing.JLabel bowImageLabel;
    private javax.swing.JButton buyButton;
    private javax.swing.JPanel characterSheet;
    private javax.swing.JButton comboPotionButton;
    private javax.swing.JLabel comboPotionLabel;
    private javax.swing.JLabel comboQuantityLabel;
    private javax.swing.JPanel eqipmentPanel;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel expLabel;
    private javax.swing.JLabel goldAmountLabel;
    private javax.swing.JLabel goldLabel;
    private javax.swing.JButton healthPotionButton;
    private javax.swing.JLabel healthPotionLabel;
    private javax.swing.JLabel heroDexLabel;
    private javax.swing.JProgressBar heroHpBar;
    private javax.swing.JLabel heroHpBarLabel;
    private javax.swing.JLabel heroIntLabel;
    private javax.swing.JProgressBar heroMpBar;
    private javax.swing.JLabel heroMpBarLabel;
    private javax.swing.JLabel heroStrLabel;
    private javax.swing.JProgressBar heroXpBar;
    private javax.swing.JLabel heroXpBarLabel;
    private javax.swing.JScrollPane inventoryScrollPane;
    private javax.swing.JTable inventoryTable;
    private javax.swing.JPanel itemPanel3;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JLayeredPane jLayeredPane5;
    private javax.swing.JLayeredPane jLayeredPane7;
    private javax.swing.JLabel levelLabel;
    private javax.swing.JLabel potionQuantityLabel;
    private javax.swing.JLabel roleLabel;
    private javax.swing.JLabel smithBackground;
    private javax.swing.JLabel smithLabel;
    private javax.swing.JLabel stonesImageLabel;
    private javax.swing.JLabel swordImageLabel;
    private javax.swing.JLabel wagerAmountLabel;
    private javax.swing.JLabel wagerLabel;
    private javax.swing.JButton walk;
    private javax.swing.JLabel xpCreditsLabel;
    // End of variables declaration//GEN-END:variables

    /**
    * Update the frame with the current player's information
    */  
    public void updateForm(){
                                   
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>(){
            
            @Override
            protected Void doInBackground() throws Exception {
                Arena.CUR_PLAYER.roleAdjust();
                setAbilityList();
                roleLabel.setText(Arena.CUR_PLAYER.getRole());
                levelLabel.setText("LEVEL: "+Arena.CUR_PLAYER.getLevel());
                heroHpBarLabel.setText(Arena.CUR_PLAYER.getCurHp()+"/"
                        +Arena.CUR_PLAYER.getMaxHp());
                heroMpBarLabel.setText(Arena.CUR_PLAYER.getCurMp()+"/"
                        +Arena.CUR_PLAYER.getMaxMp());
                heroXpBarLabel.setText(Arena.CUR_PLAYER.getXp()+"/"
                        +Arena.CUR_PLAYER.getTnl());
                heroHpBar.setMaximum(Arena.CUR_PLAYER.getMaxHp());
                heroHpBar.setValue(Arena.CUR_PLAYER.getMaxHp()- 
                        Arena.CUR_PLAYER.getCurHp());
                heroMpBar.setMaximum(Arena.CUR_PLAYER.getMaxMp());
                heroMpBar.setValue(Arena.CUR_PLAYER.getMaxMp()- 
                        Arena.CUR_PLAYER.getCurMp());
                heroXpBar.setMaximum(Arena.CUR_PLAYER.getTnl());
                heroXpBar.setValue(Arena.CUR_PLAYER.getTnl() - 
                        Arena.CUR_PLAYER.getXp());
                heroStrLabel.setText("STR: "+Arena.CUR_PLAYER.getStr());
                heroIntLabel.setText("INT: "+Arena.CUR_PLAYER.getMag());
                heroDexLabel.setText("DEX: "+Arena.CUR_PLAYER.getDex());
                potionQuantityLabel.setText(Arena.CUR_PLAYER.getItems()
                        .get(Items.HEALTH.getName()).getQuantity()+"");
                abilityQuantityLabel.setText(Arena.CUR_PLAYER.getItems()
                        .get(Items.ABILITY.getName()).getQuantity()+"");
                comboQuantityLabel.setText(Arena.CUR_PLAYER.getItems()
                        .get(Items.COMBO.getName()).getQuantity()+"");
                xpCreditsLabel.setText(Arena.CUR_PLAYER.getXpCredits()+"");
                goldAmountLabel.setText(Arena.CUR_PLAYER.getGold()+"");
                wagerAmountLabel.setText(Arena.CUR_PLAYER.getGoldWagered()+"");
                wagerLabel.setToolTipText("Rounds Wagered: "+Arena.CUR_PLAYER
                        .getRoundsWagered()+"");
                swordImageLabel.setToolTipText(Arena.CUR_PLAYER.getEquip()
                        .get("PHYSICAL").getName().toUpperCase()
                        +"     Str:"+Arena.CUR_PLAYER.getEquip().get("PHYSICAL")
                                .getStr()+" Mag:"+arena3.Arena.CUR_PLAYER.
                                        getEquip().get("PHYSICAL").
                                        getMag()+" Dex:"+arena3.Arena
                                                .CUR_PLAYER.getEquip()
                                                .get("PHYSICAL").getDex());
                bowImageLabel.setToolTipText(Arena.CUR_PLAYER.getEquip()
                        .get("RANGED").getName().toUpperCase()
                        +"     Str:"+arena3.Arena.CUR_PLAYER.getEquip()
                                .get("RANGED").getStr()+" Mag:"+arena3.Arena
                                        .CUR_PLAYER.getEquip().get("RANGED")
                                        .getMag()+" Dex:"+arena3.Arena.
                                                CUR_PLAYER.getEquip().
                                                get("RANGED").getDex());
                stonesImageLabel.setToolTipText(Arena.CUR_PLAYER.getEquip()
                        .get("MAGICAL").getName().toUpperCase()
                        +"     Str:"+arena3.Arena.CUR_PLAYER.getEquip()
                                .get("MAGICAL").getStr()+" Mag:"+arena3.Arena
                                        .CUR_PLAYER.getEquip().get("MAGICAL")
                                        .getMag()+" Dex:"+arena3.Arena.
                                                CUR_PLAYER.getEquip().
                                                get("MAGICAL").getDex());
                return null;
            }
        };
    worker.execute();
    }
    
    /**
    * Set the ability list component to the current player's abilities
    */
    public void setAbilityList(){
      Vector<String> abilities = new Vector<>();
      if(Arena.CUR_PLAYER.getRole().equals(Roles.PHYSICAL.getRole())){
          for(Map.Entry<String,Ability> entrySet: Arena.CUR_PLAYER.getAbilites()
                  .entrySet()){
              if(entrySet.getValue().getType().equals("Physical")){
                  abilities.add(entrySet.getKey()+":        (AP  "+(int)
                          (Arena.CUR_PLAYER.getMaxMp()*entrySet.getValue()
                                  .getCost())+")");
              }    
          }    
      }
      else if(Arena.CUR_PLAYER.getRole().equals(Roles.MAGICAL.getRole())){
          for(Map.Entry<String,Ability> entrySet: Arena.CUR_PLAYER.getAbilites()
                  .entrySet()){
              if(entrySet.getValue().getType().equals("Magical")){
                  abilities.add(entrySet.getKey()+":        (AP  "+(int)
                          (Arena.CUR_PLAYER.getMaxMp()*entrySet.getValue()
                                  .getCost())+")");
              }    
          } 
      }
      else if(Arena.CUR_PLAYER.getRole().equals(Roles.RANGED.getRole())){
          for(Map.Entry<String,Ability> entrySet: Arena.CUR_PLAYER.getAbilites()
                  .entrySet()){
              if(entrySet.getValue().getType().equals("Ranged")){
                  abilities.add(entrySet.getKey()+":        (AP  "+(int)
                          (Arena.CUR_PLAYER.getMaxMp()*entrySet.getValue()
                                  .getCost())+")");
              }    
          } 
      }
      else{
          for(Map.Entry<String,Ability> entrySet: Arena.CUR_PLAYER.getAbilites()
                  .entrySet()){
              if(entrySet.getValue().getType().equals("Balanced")){
                  abilities.add(entrySet.getKey()+":        (AP  "+(int)
                          (Arena.CUR_PLAYER.getMaxMp()*entrySet.getValue()
                                  .getCost())+")");
              }    
          } 
      }
      abilityList.setListData(abilities);
  }
}
